!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";var o,r,i,A,s,l,a=(o="/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/model/Model.ts",r="2096ff99e9cbd006404084bb4cd329852694f620",i=new(0,function(){}.constructor)("return this")(),s={path:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/model/Model.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:32}},1:{start:{line:6,column:8},end:{line:6,column:29}},2:{start:{line:7,column:8},end:{line:7,column:29}},3:{start:{line:10,column:8},end:{line:10,column:32}},4:{start:{line:13,column:8},end:{line:17,column:9}},5:{start:{line:14,column:26},end:{line:14,column:73}},6:{start:{line:14,column:67},end:{line:14,column:72}},7:{start:{line:15,column:29},end:{line:15,column:109}},8:{start:{line:15,column:62},end:{line:15,column:108}},9:{start:{line:16,column:12},end:{line:16,column:47}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:25},end:{line:4,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:8,column:5}},line:5},2:{name:"(anonymous_2)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:25},end:{line:11,column:5}},line:9},3:{name:"(anonymous_3)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:20},end:{line:18,column:5}},line:12},4:{name:"(anonymous_4)",decl:{start:{line:14,column:57},end:{line:14,column:58}},loc:{start:{line:14,column:67},end:{line:14,column:72}},line:14},5:{name:"(anonymous_5)",decl:{start:{line:15,column:57},end:{line:15,column:58}},loc:{start:{line:15,column:62},end:{line:15,column:108}},line:15}},branchMap:{0:{loc:{start:{line:13,column:8},end:{line:17,column:9}},type:"if",locations:[{start:{line:13,column:8},end:{line:17,column:9}},{start:{line:13,column:8},end:{line:17,column:9}}],line:13},1:{loc:{start:{line:13,column:12},end:{line:13,column:63}},type:"binary-expr",locations:[{start:{line:13,column:12},end:{line:13,column:36}},{start:{line:13,column:40},end:{line:13,column:63}}],line:13}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0],1:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/model/Model.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/model/Model.ts"],names:[],mappings:"AAEA,MAAM,KAAK;IAET,YAAY,OAAgB;QAC1B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,IAAI,OAAO;QACT,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,IAAI,OAAO,CAAC,OAAO;QACjB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,aAAa;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YACvD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9D,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAC1C,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,GAAG,GAAG,CACpD,CAAC;YACF,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC;SACpC;IACH,CAAC;CACF;AAED,OAAO,EAAE,KAAK,EAAE,CAAC",sourcesContent:["import { Options } from '../../src/model/Options';\n\nclass Model {\n  private _options: Options;\n  constructor(options: Options) {\n    this._options = options;\n  }\n\n  get options(): Options {\n    this.countPercents();\n    return this._options;\n  }\n\n  set options(options) {\n    this._options = options;\n  }\n\n  countPercents(): void {\n    if (!this._options.amountPrc && this._options.amountAbs) {\n      const total = this._options.amountAbs.reduce((a, b) => a + b);\n      const percents = this._options.amountAbs.map(\n        a => Math.round((a / total) * 100).toString() + '%',\n      );\n      this._options.amountPrc = percents;\n    }\n  }\n}\n\nexport { Model };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(l=i[A="__coverage__"]||(i[A]={}))[o]&&l[o].hash===r?l[o]:(s.hash=r,l[o]=s));class c{constructor(e){a.f[0]++,a.s[0]++,this._options=e}get options(){return a.f[1]++,a.s[1]++,this.countPercents(),a.s[2]++,this._options}set options(e){a.f[2]++,a.s[3]++,this._options=e}countPercents(){if(a.f[3]++,a.s[4]++,a.b[1][0]++,!this._options.amountPrc&&(a.b[1][1]++,this._options.amountAbs)){a.b[0][0]++;const e=(a.s[5]++,this._options.amountAbs.reduce((e,t)=>(a.f[4]++,a.s[6]++,e+t))),t=(a.s[7]++,this._options.amountAbs.map(t=>(a.f[5]++,a.s[8]++,Math.round(t/e*100).toString()+"%")));a.s[9]++,this._options.amountPrc=t}else a.b[0][1]++}}var u=function(){var e="/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/SvgGroup.ts",t="b39334f6237cfc7328221fc7b948152acfb617e6",n=new(0,function(){}.constructor)("return this")(),o="__coverage__",r={path:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/SvgGroup.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:30}},1:{start:{line:4,column:22},end:{line:4,column:50}},2:{start:{line:5,column:8},end:{line:5,column:63}},3:{start:{line:6,column:8},end:{line:6,column:43}},4:{start:{line:7,column:8},end:{line:7,column:55}},5:{start:{line:8,column:8},end:{line:8,column:46}},6:{start:{line:9,column:8},end:{line:9,column:38}},7:{start:{line:10,column:8},end:{line:10,column:32}},8:{start:{line:11,column:8},end:{line:11,column:30}},9:{start:{line:14,column:8},end:{line:14,column:29}},10:{start:{line:17,column:8},end:{line:17,column:74}},11:{start:{line:18,column:8},end:{line:18,column:110}},12:{start:{line:19,column:8},end:{line:19,column:75}},13:{start:{line:20,column:8},end:{line:20,column:77}},14:{start:{line:23,column:8},end:{line:23,column:23}},15:{start:{line:26,column:8},end:{line:26,column:45}},16:{start:{line:27,column:8},end:{line:27,column:50}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:24},end:{line:12,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:18},end:{line:15,column:5}},line:13},2:{name:"(anonymous_2)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:23},end:{line:21,column:5}},line:16},3:{name:"(anonymous_3)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:16},end:{line:24,column:5}},line:22},4:{name:"(anonymous_4)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:21},end:{line:28,column:5}},line:25}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},f:{0:0,1:0,2:0,3:0,4:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/SvgGroup.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/SvgGroup.ts"],names:[],mappings:"AAAA,MAAM,QAAQ;IAKZ,YAAY,MAAmB;QAC7B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,MAAM,KAAK,GAAG,4BAA4B,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACtC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAAC;QAClE,IAAI,CAAC,QAAQ,CAAC,YAAY,CACxB,SAAS,EACT,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAC/D,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;CACF;AAED,OAAO,EAAE,QAAQ,EAAE,CAAC",sourcesContent:["class SvgGroup {\n  private _parent: HTMLElement;\n  private _svgElem: SVGElement;\n  private _g: SVGElement;\n\n  constructor(parent: HTMLElement) {\n    this._parent = parent;\n    const xmlns = 'http://www.w3.org/2000/svg';\n    this._svgElem = document.createElementNS(xmlns, 'svg');\n    this._parent.append(this._svgElem);\n    this._g = document.createElementNS(xmlns, 'g');\n    this._g.classList.add('chart-circle');\n    this._svgElem.append(this._g);\n    this.setSVGAttributes();\n    this.setGAttributes();\n  }\n\n  get svgElem(): SVGElement {\n    return this._svgElem;\n  }\n\n  setSVGAttributes(): void {\n    this._svgElem.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    this._svgElem.setAttribute(\n      'viewbox',\n      `0 0 ${this._parent.offsetWidth} ${this._parent.offsetHeight}`,\n    );\n\n    this._svgElem.setAttribute('width', `${this._parent.offsetWidth}`);\n    this._svgElem.setAttribute('height', `${this._parent.offsetHeight}`);\n  }\n\n  get gElem(): SVGElement {\n    return this._g;\n  }\n\n  setGAttributes(): void {\n    this._g.setAttribute('fill', 'none');\n    this._g.setAttribute('stroke-width', '4');\n  }\n}\n\nexport { SvgGroup };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=n[o]||(n[o]={});return i[e]&&i[e].hash===t?i[e]:(r.hash=t,i[e]=r)}();class d{constructor(e){u.f[0]++,u.s[0]++,this._parent=e;const t=(u.s[1]++,"http://www.w3.org/2000/svg");u.s[2]++,this._svgElem=document.createElementNS(t,"svg"),u.s[3]++,this._parent.append(this._svgElem),u.s[4]++,this._g=document.createElementNS(t,"g"),u.s[5]++,this._g.classList.add("chart-circle"),u.s[6]++,this._svgElem.append(this._g),u.s[7]++,this.setSVGAttributes(),u.s[8]++,this.setGAttributes()}get svgElem(){return u.f[1]++,u.s[9]++,this._svgElem}setSVGAttributes(){u.f[2]++,u.s[10]++,this._svgElem.setAttribute("xmlns","http://www.w3.org/2000/svg"),u.s[11]++,this._svgElem.setAttribute("viewbox",`0 0 ${this._parent.offsetWidth} ${this._parent.offsetHeight}`),u.s[12]++,this._svgElem.setAttribute("width",`${this._parent.offsetWidth}`),u.s[13]++,this._svgElem.setAttribute("height",`${this._parent.offsetHeight}`)}get gElem(){return u.f[3]++,u.s[14]++,this._g}setGAttributes(){u.f[4]++,u.s[15]++,this._g.setAttribute("fill","none"),u.s[16]++,this._g.setAttribute("stroke-width","4")}}var C=function(){var e="/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/Arc.ts",t="c914c27721198a35b56d9eb8e027cb3fd13506fc",n=new(0,function(){}.constructor)("return this")(),o="__coverage__",r={path:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/Arc.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:30}},1:{start:{line:4,column:22},end:{line:4,column:50}},2:{start:{line:5,column:8},end:{line:5,column:62}},3:{start:{line:6,column:8},end:{line:6,column:39}},4:{start:{line:7,column:8},end:{line:7,column:28}},5:{start:{line:10,column:8},end:{line:10,column:25}},6:{start:{line:13,column:8},end:{line:13,column:31}},7:{start:{line:16,column:8},end:{line:16,column:62}},8:{start:{line:17,column:8},end:{line:17,column:63}},9:{start:{line:20,column:8},end:{line:20,column:66}},10:{start:{line:23,column:8},end:{line:23,column:77}},11:{start:{line:24,column:22},end:{line:24,column:62}},12:{start:{line:25,column:8},end:{line:25,column:82}},13:{start:{line:28,column:30},end:{line:28,column:49}},14:{start:{line:29,column:27},end:{line:29,column:72}},15:{start:{line:30,column:8},end:{line:35,column:9}},16:{start:{line:31,column:12},end:{line:31,column:73}},17:{start:{line:34,column:12},end:{line:34,column:76}},18:{start:{line:38,column:8},end:{line:38,column:48}},19:{start:{line:41,column:31},end:{line:41,column:103}},20:{start:{line:42,column:19},end:{line:42,column:38}},21:{start:{line:43,column:8},end:{line:43,column:31}},22:{start:{line:44,column:8},end:{line:44,column:56}},23:{start:{line:45,column:8},end:{line:45,column:48}},24:{start:{line:46,column:8},end:{line:46,column:47}},25:{start:{line:47,column:8},end:{line:47,column:48}},26:{start:{line:48,column:8},end:{line:48,column:49}},27:{start:{line:49,column:8},end:{line:49,column:71}},28:{start:{line:50,column:29},end:{line:50,column:111}},29:{start:{line:50,column:48},end:{line:50,column:110}},30:{start:{line:51,column:8},end:{line:56,column:11}},31:{start:{line:52,column:12},end:{line:52,column:40}},32:{start:{line:53,column:12},end:{line:53,column:60}},33:{start:{line:54,column:12},end:{line:55,column:49}},34:{start:{line:55,column:16},end:{line:55,column:49}},35:{start:{line:57,column:8},end:{line:57,column:36}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:24},end:{line:8,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:15},end:{line:11,column:5}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:20},end:{line:14,column:5}},line:12},3:{name:"(anonymous_3)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:47},end:{line:18,column:5}},line:15},4:{name:"(anonymous_4)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:30},end:{line:21,column:5}},line:19},5:{name:"(anonymous_5)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:48},end:{line:26,column:5}},line:22},6:{name:"(anonymous_6)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:44},end:{line:36,column:5}},line:27},7:{name:"(anonymous_7)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:20},end:{line:39,column:5}},line:37},8:{name:"(anonymous_8)",decl:{start:{line:40,column:4},end:{line:40,column:5}},loc:{start:{line:40,column:32},end:{line:58,column:5}},line:40},9:{name:"(anonymous_9)",decl:{start:{line:50,column:42},end:{line:50,column:43}},loc:{start:{line:50,column:48},end:{line:50,column:110}},line:50},10:{name:"(anonymous_10)",decl:{start:{line:51,column:29},end:{line:51,column:30}},loc:{start:{line:51,column:45},end:{line:56,column:9}},line:51}},branchMap:{0:{loc:{start:{line:30,column:8},end:{line:35,column:9}},type:"if",locations:[{start:{line:30,column:8},end:{line:35,column:9}},{start:{line:30,column:8},end:{line:35,column:9}}],line:30},1:{loc:{start:{line:54,column:12},end:{line:55,column:49}},type:"if",locations:[{start:{line:54,column:12},end:{line:55,column:49}},{start:{line:54,column:12},end:{line:55,column:49}}],line:54}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0},b:{0:[0,0],1:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/Arc.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/Arc.ts"],names:[],mappings:"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",sourcesContent:["class Arc {\n  private _parent: SVGElement;\n  private _arc: SVGCircleElement;\n  private _arcLength: number;\n\n  constructor(parent: SVGElement) {\n    this._parent = parent;\n    const xmlns = 'http://www.w3.org/2000/svg';\n    this._arc = document.createElementNS(xmlns, 'circle');\n    this._parent.append(this._arc);\n    this._arcLength = 0;\n  }\n\n  get elem(): SVGCircleElement {\n    return this._arc;\n  }\n  get arcLength(): number {\n    return this._arcLength;\n  }\n\n  setCenter(containerWidth: number, containerHeight: number): void {\n    this._arc.setAttribute('cx', `${containerWidth / 2}`);\n    this._arc.setAttribute('cy', `${containerHeight / 2}`);\n  }\n  setRadius(containerWidth: number): void {\n    this._arc.setAttribute('r', `${containerWidth / 2 - 10}`);\n  }\n\n  setCoverage(percent: string, circleLength: number, between: number): void {\n    this._arcLength = circleLength * (parseInt(percent) / 100) - between;\n    const space = circleLength - this._arcLength + between;\n    this._arc.setAttribute('stroke-dasharray', `${this._arcLength} ${space}`);\n  }\n\n  setOffset(circleLength: number, prevArcsLength: number): void {\n    const initialOffset = circleLength * 0.25;\n    const nextOffset = circleLength - prevArcsLength + initialOffset;\n    if (prevArcsLength) {\n      this._arc.setAttribute('stroke-dashoffset', `${nextOffset}`);\n    } else {\n      this._arc.setAttribute('stroke-dashoffset', `${initialOffset}`);\n    }\n  }\n\n  setColor(color: string): void {\n    this._arc.setAttribute('stroke', color);\n  }\n\n  setGradient(gradient: string[], defs: SVGElement): void {\n    const linearGradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');\n    const id = gradient.toString();\n    linearGradient.id = id;\n    this._arc.setAttribute('stroke', `url(#${id})`);\n    linearGradient.setAttribute('x1', '60');\n    linearGradient.setAttribute('y1', '0');\n    linearGradient.setAttribute('x2', '60');\n    linearGradient.setAttribute('y2', '120');\n    linearGradient.setAttribute('gradientUnits', 'userSpaceOnUse');\n    const stopElements = gradient.map(() =>\n      document.createElementNS('http://www.w3.org/2000/svg', 'stop'),\n    );\n    stopElements.forEach((stop, indx) => {\n      linearGradient.append(stop);\n      stop.setAttribute('stop-color', gradient[indx]);\n      if (indx === 1) stop.setAttribute('offset', '1');\n    });\n    defs.append(linearGradient);\n  }\n}\n\nexport { Arc };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=n[o]||(n[o]={});return i[e]&&i[e].hash===t?i[e]:(r.hash=t,i[e]=r)}();class f{constructor(e){C.f[0]++,C.s[0]++,this._parent=e;const t=(C.s[1]++,"http://www.w3.org/2000/svg");C.s[2]++,this._arc=document.createElementNS(t,"circle"),C.s[3]++,this._parent.append(this._arc),C.s[4]++,this._arcLength=0}get elem(){return C.f[1]++,C.s[5]++,this._arc}get arcLength(){return C.f[2]++,C.s[6]++,this._arcLength}setCenter(e,t){C.f[3]++,C.s[7]++,this._arc.setAttribute("cx",`${e/2}`),C.s[8]++,this._arc.setAttribute("cy",`${t/2}`)}setRadius(e){C.f[4]++,C.s[9]++,this._arc.setAttribute("r",`${e/2-10}`)}setCoverage(e,t,n){C.f[5]++,C.s[10]++,this._arcLength=t*(parseInt(e)/100)-n;const o=(C.s[11]++,t-this._arcLength+n);C.s[12]++,this._arc.setAttribute("stroke-dasharray",`${this._arcLength} ${o}`)}setOffset(e,t){C.f[6]++;const n=(C.s[13]++,.25*e),o=(C.s[14]++,e-t+n);C.s[15]++,t?(C.b[0][0]++,C.s[16]++,this._arc.setAttribute("stroke-dashoffset",`${o}`)):(C.b[0][1]++,C.s[17]++,this._arc.setAttribute("stroke-dashoffset",`${n}`))}setColor(e){C.f[7]++,C.s[18]++,this._arc.setAttribute("stroke",e)}setGradient(e,t){C.f[8]++;const n=(C.s[19]++,document.createElementNS("http://www.w3.org/2000/svg","linearGradient")),o=(C.s[20]++,e.toString());C.s[21]++,n.id=o,C.s[22]++,this._arc.setAttribute("stroke",`url(#${o})`),C.s[23]++,n.setAttribute("x1","60"),C.s[24]++,n.setAttribute("y1","0"),C.s[25]++,n.setAttribute("x2","60"),C.s[26]++,n.setAttribute("y2","120"),C.s[27]++,n.setAttribute("gradientUnits","userSpaceOnUse");const r=(C.s[28]++,e.map(()=>(C.f[9]++,C.s[29]++,document.createElementNS("http://www.w3.org/2000/svg","stop"))));C.s[30]++,r.forEach((t,o)=>{C.f[10]++,C.s[31]++,n.append(t),C.s[32]++,t.setAttribute("stop-color",e[o]),C.s[33]++,1===o?(C.b[1][0]++,C.s[34]++,t.setAttribute("offset","1")):C.b[1][1]++}),C.s[35]++,t.append(n)}}var p=function(){var e="/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/List.ts",t="65d5275f36d6153b66bd89adf715d83c7385f715",n=new(0,function(){}.constructor)("return this")(),o="__coverage__",r={path:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/List.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:48}},1:{start:{line:4,column:8},end:{line:4,column:48}},2:{start:{line:5,column:8},end:{line:5,column:72}},3:{start:{line:5,column:42},end:{line:5,column:70}},4:{start:{line:6,column:8},end:{line:6,column:72}},5:{start:{line:6,column:36},end:{line:6,column:69}},6:{start:{line:7,column:8},end:{line:7,column:52}},7:{start:{line:7,column:31},end:{line:7,column:50}},8:{start:{line:8,column:8},end:{line:8,column:79}},9:{start:{line:8,column:47},end:{line:8,column:77}},10:{start:{line:9,column:8},end:{line:9,column:47}},11:{start:{line:12,column:8},end:{line:12,column:24}},12:{start:{line:15,column:8},end:{line:15,column:37}},13:{start:{line:16,column:8},end:{line:16,column:42}},14:{start:{line:17,column:8},end:{line:20,column:11}},15:{start:{line:18,column:12},end:{line:18,column:43}},16:{start:{line:19,column:12},end:{line:19,column:41}},17:{start:{line:21,column:8},end:{line:21,column:72}},18:{start:{line:21,column:39},end:{line:21,column:70}},19:{start:{line:22,column:8},end:{line:33,column:11}},20:{start:{line:23,column:12},end:{line:23,column:44}},21:{start:{line:24,column:12},end:{line:24,column:43}},22:{start:{line:25,column:12},end:{line:25,column:38}},23:{start:{line:26,column:12},end:{line:26,column:37}},24:{start:{line:27,column:12},end:{line:27,column:37}},25:{start:{line:28,column:12},end:{line:28,column:34}},26:{start:{line:29,column:12},end:{line:30,column:52}},27:{start:{line:30,column:16},end:{line:30,column:52}},28:{start:{line:31,column:12},end:{line:32,column:119}},29:{start:{line:32,column:16},end:{line:32,column:119}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:49},end:{line:10,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:5,column:36},end:{line:5,column:37}},loc:{start:{line:5,column:42},end:{line:5,column:70}},line:5},2:{name:"(anonymous_2)",decl:{start:{line:6,column:21},end:{line:6,column:22}},loc:{start:{line:6,column:36},end:{line:6,column:69}},line:6},3:{name:"(anonymous_3)",decl:{start:{line:7,column:25},end:{line:7,column:26}},loc:{start:{line:7,column:31},end:{line:7,column:50}},line:7},4:{name:"(anonymous_4)",decl:{start:{line:8,column:41},end:{line:8,column:42}},loc:{start:{line:8,column:47},end:{line:8,column:77}},line:8},5:{name:"(anonymous_5)",decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:15},end:{line:13,column:5}},line:11},6:{name:"(anonymous_6)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:38},end:{line:34,column:5}},line:14},7:{name:"(anonymous_7)",decl:{start:{line:17,column:25},end:{line:17,column:26}},loc:{start:{line:17,column:31},end:{line:20,column:9}},line:17},8:{name:"(anonymous_8)",decl:{start:{line:21,column:25},end:{line:21,column:26}},loc:{start:{line:21,column:39},end:{line:21,column:70}},line:21},9:{name:"(anonymous_9)",decl:{start:{line:22,column:30},end:{line:22,column:31}},loc:{start:{line:22,column:45},end:{line:33,column:9}},line:22}},branchMap:{0:{loc:{start:{line:29,column:12},end:{line:30,column:52}},type:"if",locations:[{start:{line:29,column:12},end:{line:30,column:52}},{start:{line:29,column:12},end:{line:30,column:52}}],line:29},1:{loc:{start:{line:31,column:12},end:{line:32,column:119}},type:"if",locations:[{start:{line:31,column:12},end:{line:32,column:119}},{start:{line:31,column:12},end:{line:32,column:119}}],line:31}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0},b:{0:[0,0],1:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/List.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/List.ts"],names:[],mappings:"AAAA,MAAM,IAAI;IAKR,YAAY,YAAsB,EAAE,MAAiB,EAAE,SAAsB;QAC3E,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACxC,IAAI,CAAC,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IACzC,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,cAAc,CAAC,MAAiB,EAAE,SAAsB;QACtD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YACpB,EAAE,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;YAC/B,EAAE,CAAC,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC;QAC/B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAClC,GAAG,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;YAChC,GAAG,CAAC,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;YAC/B,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YAC1B,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;YACzB,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;YACzB,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;YACtB,IAAI,MAAM;gBAAE,GAAG,CAAC,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,SAAS;gBACX,GAAG,CAAC,KAAK,CAAC,UAAU,GAAG,2BAA2B,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC3G,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,OAAO,EAAE,IAAI,EAAE,CAAC",sourcesContent:["class List {\n  private _ul: HTMLElement;\n  private _li: HTMLLIElement[];\n  private _bullets: HTMLElement[];\n\n  constructor(chartOptions: string[], colors?: string[], gradients?: string[][]) {\n    this._ul = document.createElement('ul');\n    this._ul.classList.add('chart_options');\n    this._li = chartOptions.map(() => document.createElement('li'));\n    this._li.map((li, indx) => (li.innerHTML = chartOptions[indx]));\n    this._li.forEach(li => this._ul.append(li));\n    this._bullets = chartOptions.map(() => document.createElement('span'));\n    this.setBulletStyle(colors, gradients);\n  }\n\n  get elem(): HTMLElement {\n    return this._ul;\n  }\n\n  setBulletStyle(colors?: string[], gradients?: string[][]): void {\n    this._ul.style.padding = '0';\n    this._ul.style.listStyle = 'none';\n    this._li.forEach(li => {\n      li.style.position = 'relative';\n      li.style.marginLeft = '15px';\n    });\n    this._li.forEach((li, indx) => li.prepend(this._bullets[indx]));\n    this._bullets.forEach((bul, indx) => {\n      bul.style.position = 'absolute';\n      bul.style.borderRadius = '50%';\n      bul.style.height = '10px';\n      bul.style.width = '10px';\n      bul.style.left = '-15px';\n      bul.style.top = '4px';\n      if (colors) bul.style.background = colors[indx];\n      if (gradients)\n        bul.style.background = `linear-gradient(180deg, ${gradients[indx][0]} 0%, ${gradients[indx][1]} 100%)`;\n    });\n  }\n}\n\nexport { List };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=n[o]||(n[o]={});return i[e]&&i[e].hash===t?i[e]:(r.hash=t,i[e]=r)}();class m{constructor(e,t,n){p.f[0]++,p.s[0]++,this._ul=document.createElement("ul"),p.s[1]++,this._ul.classList.add("chart_options"),p.s[2]++,this._li=e.map(()=>(p.f[1]++,p.s[3]++,document.createElement("li"))),p.s[4]++,this._li.map((t,n)=>(p.f[2]++,p.s[5]++,t.innerHTML=e[n])),p.s[6]++,this._li.forEach(e=>(p.f[3]++,p.s[7]++,this._ul.append(e))),p.s[8]++,this._bullets=e.map(()=>(p.f[4]++,p.s[9]++,document.createElement("span"))),p.s[10]++,this.setBulletStyle(t,n)}get elem(){return p.f[5]++,p.s[11]++,this._ul}setBulletStyle(e,t){p.f[6]++,p.s[12]++,this._ul.style.padding="0",p.s[13]++,this._ul.style.listStyle="none",p.s[14]++,this._li.forEach(e=>{p.f[7]++,p.s[15]++,e.style.position="relative",p.s[16]++,e.style.marginLeft="15px"}),p.s[17]++,this._li.forEach((e,t)=>(p.f[8]++,p.s[18]++,e.prepend(this._bullets[t]))),p.s[19]++,this._bullets.forEach((n,o)=>{p.f[9]++,p.s[20]++,n.style.position="absolute",p.s[21]++,n.style.borderRadius="50%",p.s[22]++,n.style.height="10px",p.s[23]++,n.style.width="10px",p.s[24]++,n.style.left="-15px",p.s[25]++,n.style.top="4px",p.s[26]++,e?(p.b[0][0]++,p.s[27]++,n.style.background=e[o]):p.b[0][1]++,p.s[28]++,t?(p.b[1][0]++,p.s[29]++,n.style.background=`linear-gradient(180deg, ${t[o][0]} 0%, ${t[o][1]} 100%)`):p.b[1][1]++})}}var h=function(){var e="/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/Chart.ts",t="185f8f20f4b29df0a27689b37e0334bde1693aa7",n=new(0,function(){}.constructor)("return this")(),o="__coverage__",r={path:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/Chart.ts",statementMap:{0:{start:{line:6,column:8},end:{line:6,column:32}},1:{start:{line:7,column:8},end:{line:7,column:46}},2:{start:{line:8,column:8},end:{line:8,column:24}},3:{start:{line:9,column:8},end:{line:9,column:34}},4:{start:{line:10,column:8},end:{line:10,column:24}},5:{start:{line:11,column:8},end:{line:11,column:56}},6:{start:{line:12,column:8},end:{line:12,column:48}},7:{start:{line:13,column:8},end:{line:16,column:9}},8:{start:{line:14,column:25},end:{line:14,column:90}},9:{start:{line:15,column:12},end:{line:15,column:36}},10:{start:{line:17,column:8},end:{line:19,column:11}},11:{start:{line:18,column:12},end:{line:18,column:83}},12:{start:{line:20,column:8},end:{line:20,column:45}},13:{start:{line:23,column:8},end:{line:29,column:9}},14:{start:{line:24,column:12},end:{line:24,column:84}},15:{start:{line:24,column:53},end:{line:24,column:82}},16:{start:{line:25,column:12},end:{line:25,column:94}},17:{start:{line:26,column:12},end:{line:26,column:51}},18:{start:{line:27,column:12},end:{line:27,column:72}},19:{start:{line:28,column:12},end:{line:28,column:73}},20:{start:{line:30,column:8},end:{line:32,column:9}},21:{start:{line:31,column:12},end:{line:31,column:46}},22:{start:{line:33,column:8},end:{line:35,column:9}},23:{start:{line:34,column:12},end:{line:34,column:53}},24:{start:{line:38,column:8},end:{line:38,column:26}},25:{start:{line:41,column:8},end:{line:41,column:82}},26:{start:{line:41,column:34},end:{line:41,column:80}},27:{start:{line:44,column:8},end:{line:44,column:65}},28:{start:{line:44,column:34},end:{line:44,column:63}},29:{start:{line:47,column:8},end:{line:50,column:11}},30:{start:{line:48,column:12},end:{line:48,column:66}},31:{start:{line:49,column:12},end:{line:49,column:53}},32:{start:{line:53,column:8},end:{line:58,column:11}},33:{start:{line:54,column:34},end:{line:56,column:17}},34:{start:{line:55,column:16},end:{line:55,column:29}},35:{start:{line:57,column:12},end:{line:57,column:55}},36:{start:{line:61,column:8},end:{line:61,column:72}},37:{start:{line:61,column:43},end:{line:61,column:70}},38:{start:{line:64,column:21},end:{line:64,column:83}},39:{start:{line:65,column:8},end:{line:65,column:44}},40:{start:{line:66,column:8},end:{line:66,column:82}},41:{start:{line:66,column:42},end:{line:66,column:80}},42:{start:{line:69,column:19},end:{line:69,column:24}},43:{start:{line:70,column:18},end:{line:70,column:41}},44:{start:{line:71,column:29},end:{line:71,column:39}},45:{start:{line:72,column:8},end:{line:72,column:28}},46:{start:{line:75,column:8},end:{line:75,column:52}},47:{start:{line:76,column:8},end:{line:79,column:9}},48:{start:{line:77,column:12},end:{line:77,column:57}},49:{start:{line:78,column:12},end:{line:78,column:56}},50:{start:{line:80,column:27},end:{line:80,column:56}},51:{start:{line:81,column:8},end:{line:81,column:49}},52:{start:{line:82,column:26},end:{line:82,column:55}},53:{start:{line:83,column:8},end:{line:83,column:47}},54:{start:{line:84,column:8},end:{line:84,column:45}},55:{start:{line:85,column:8},end:{line:87,column:11}},56:{start:{line:86,column:12},end:{line:86,column:41}},57:{start:{line:90,column:8},end:{line:92,column:9}},58:{start:{line:91,column:12},end:{line:91,column:79}},59:{start:{line:93,column:8},end:{line:93,column:44}},60:{start:{line:94,column:8},end:{line:99,column:9}},61:{start:{line:95,column:12},end:{line:95,column:69}},62:{start:{line:97,column:13},end:{line:99,column:9}},63:{start:{line:98,column:12},end:{line:98,column:75}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:33},end:{line:21,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:17,column:27},end:{line:17,column:28}},loc:{start:{line:17,column:42},end:{line:19,column:9}},line:17},2:{name:"(anonymous_2)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:39},end:{line:36,column:5}},line:22},3:{name:"(anonymous_3)",decl:{start:{line:24,column:47},end:{line:24,column:48}},loc:{start:{line:24,column:53},end:{line:24,column:82}},line:24},4:{name:"(anonymous_4)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:15},end:{line:39,column:5}},line:37},5:{name:"(anonymous_5)",decl:{start:{line:40,column:4},end:{line:40,column:5}},loc:{start:{line:40,column:51},end:{line:42,column:5}},line:40},6:{name:"(anonymous_6)",decl:{start:{line:41,column:27},end:{line:41,column:28}},loc:{start:{line:41,column:34},end:{line:41,column:80}},line:41},7:{name:"(anonymous_7)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:34},end:{line:45,column:5}},line:43},8:{name:"(anonymous_8)",decl:{start:{line:44,column:27},end:{line:44,column:28}},loc:{start:{line:44,column:34},end:{line:44,column:63}},line:44},9:{name:"(anonymous_9)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:44},end:{line:51,column:5}},line:46},10:{name:"(anonymous_10)",decl:{start:{line:47,column:27},end:{line:47,column:28}},loc:{start:{line:47,column:43},end:{line:50,column:9}},line:47},11:{name:"(anonymous_11)",decl:{start:{line:52,column:4},end:{line:52,column:5}},loc:{start:{line:52,column:32},end:{line:59,column:5}},line:52},12:{name:"(anonymous_12)",decl:{start:{line:53,column:27},end:{line:53,column:28}},loc:{start:{line:53,column:42},end:{line:58,column:9}},line:53},13:{name:"(anonymous_13)",decl:{start:{line:54,column:77},end:{line:54,column:78}},loc:{start:{line:54,column:93},end:{line:56,column:13}},line:54},14:{name:"(anonymous_14)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:25},end:{line:62,column:5}},line:60},15:{name:"(anonymous_15)",decl:{start:{line:61,column:27},end:{line:61,column:28}},loc:{start:{line:61,column:43},end:{line:61,column:70}},line:61},16:{name:"(anonymous_16)",decl:{start:{line:63,column:4},end:{line:63,column:5}},loc:{start:{line:63,column:32},end:{line:67,column:5}},line:63},17:{name:"(anonymous_17)",decl:{start:{line:66,column:27},end:{line:66,column:28}},loc:{start:{line:66,column:42},end:{line:66,column:80}},line:66},18:{name:"(anonymous_18)",decl:{start:{line:68,column:4},end:{line:68,column:5}},loc:{start:{line:68,column:36},end:{line:73,column:5}},line:68},19:{name:"(anonymous_19)",decl:{start:{line:74,column:4},end:{line:74,column:5}},loc:{start:{line:74,column:20},end:{line:88,column:5}},line:74},20:{name:"(anonymous_20)",decl:{start:{line:85,column:27},end:{line:85,column:28}},loc:{start:{line:85,column:35},end:{line:87,column:9}},line:85},21:{name:"(anonymous_21)",decl:{start:{line:89,column:4},end:{line:89,column:5}},loc:{start:{line:89,column:19},end:{line:100,column:5}},line:89}},branchMap:{0:{loc:{start:{line:13,column:8},end:{line:16,column:9}},type:"if",locations:[{start:{line:13,column:8},end:{line:16,column:9}},{start:{line:13,column:8},end:{line:16,column:9}}],line:13},1:{loc:{start:{line:23,column:8},end:{line:29,column:9}},type:"if",locations:[{start:{line:23,column:8},end:{line:29,column:9}},{start:{line:23,column:8},end:{line:29,column:9}}],line:23},2:{loc:{start:{line:30,column:8},end:{line:32,column:9}},type:"if",locations:[{start:{line:30,column:8},end:{line:32,column:9}},{start:{line:30,column:8},end:{line:32,column:9}}],line:30},3:{loc:{start:{line:33,column:8},end:{line:35,column:9}},type:"if",locations:[{start:{line:33,column:8},end:{line:35,column:9}},{start:{line:33,column:8},end:{line:35,column:9}}],line:33},4:{loc:{start:{line:76,column:8},end:{line:79,column:9}},type:"if",locations:[{start:{line:76,column:8},end:{line:79,column:9}},{start:{line:76,column:8},end:{line:79,column:9}}],line:76},5:{loc:{start:{line:90,column:8},end:{line:92,column:9}},type:"if",locations:[{start:{line:90,column:8},end:{line:92,column:9}},{start:{line:90,column:8},end:{line:92,column:9}}],line:90},6:{loc:{start:{line:94,column:8},end:{line:99,column:9}},type:"if",locations:[{start:{line:94,column:8},end:{line:99,column:9}},{start:{line:94,column:8},end:{line:99,column:9}}],line:94},7:{loc:{start:{line:97,column:13},end:{line:99,column:9}},type:"if",locations:[{start:{line:97,column:13},end:{line:99,column:9}},{start:{line:97,column:13},end:{line:99,column:9}}],line:97}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/Chart.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/view/Chart.ts"],names:[],mappings:"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAC5B,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,MAAM,KAAK;IAQT,YAAY,MAAmB,EAAE,OAAgB;QAC/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxC,IAAI,OAAO,CAAC,YAAY,EAAE;YACxB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;YAC/E,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACzB;QACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAC/B,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,iBAAiB,CAAC,MAAmB,EAAE,OAAgB;QACrD,IAAI,OAAO,CAAC,SAAS,EAAE;YACrB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;YAClF,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACvC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;YAC5D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;SAC9D;QACD,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACnC;QACD,IAAI,OAAO,CAAC,SAAS,EAAE;YACrB,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAC1C;IACH,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,aAAa,CAAC,cAAsB,EAAE,eAAuB;QAC3D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED,aAAa,CAAC,cAAsB;QAClC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,eAAe,CAAC,QAAkB,EAAE,YAAoB;QACtD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;YAChC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YAEtD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa,CAAC,YAAoB;QAChC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAC/B,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,UAAS,CAAC,EAAE,CAAC;gBAC5E,OAAO,CAAC,GAAG,CAAC,CAAC;YACf,CAAC,EAAE,CAAC,CAAC,CAAC;YACN,GAAG,CAAC,SAAS,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,MAAgB;QAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC;IAED,gBAAgB,CAAC,SAAqB;QACpC,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC,CAAC;QAC5E,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED,eAAe,CAAC,cAAsB;QACpC,MAAM,EAAE,GAAG,KAAK,CAAC;QACjB,MAAM,CAAC,GAAG,cAAc,GAAG,CAAC,GAAG,EAAE,CAAC;QAClC,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAChC,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,OAAO,CAAC,MAAkB;QACxB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,MAAM,CAAC,aAAa,EAAE;YACxB,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;SAC7C;QACD,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACzC,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAChD,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACvC,IAAI,CAAC,KAAK,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC3B,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;SACpE;QACD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC;QACpC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC1D;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAClC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAChE;IACH,CAAC;CACF;AAED,OAAO,EAAE,KAAK,EAAE,CAAC",sourcesContent:["import { Options } from '../model/Options';\nimport { SvgGroup } from './SvgGroup';\nimport { Arc } from './Arc';\nimport { List } from './List';\n\nclass Chart {\n  private _svgGroup: SvgGroup;\n  private _arcs: Arc[];\n  private _storeArcLength: number[];\n  private _text: HTMLElement[];\n  private _textGroup: HTMLElement;\n  private _options: Options;\n\n  constructor(parent: HTMLElement, options: Options) {\n    this._options = options;\n    this._svgGroup = new SvgGroup(parent);\n    this._arcs = [];\n    this._storeArcLength = [];\n    this._text = [];\n    this._textGroup = document.createElement('div');\n    this.setArcsParameters(parent, options);\n    if (options.chartOptions) {\n      const list = new List(options.chartOptions, options.colors, options.gradients);\n      parent.after(list.elem);\n    }\n    this._arcs.forEach((arc, indx) => {\n      arc.elem.addEventListener('mouseover', this.showText.bind(this, indx));\n    });\n    this.setText(this._svgGroup.svgElem);\n  }\n\n  setArcsParameters(parent: HTMLElement, options: Options): void {\n    if (options.amountPrc) {\n      this._arcs = options.amountPrc.map(() => new Arc(this._svgGroup.gElem));\n      this.setArcsCoverage(options.amountPrc, this.getCircleLength(parent.offsetWidth));\n      this.setArcsRadius(parent.offsetWidth);\n      this.setArcsCenter(parent.offsetWidth, parent.offsetHeight);\n      this.setArcsOffset(this.getCircleLength(parent.offsetWidth));\n    }\n    if (options.colors) {\n      this.setArcsColor(options.colors);\n    }\n    if (options.gradients) {\n      this.setArcsGradients(options.gradients);\n    }\n  }\n\n  get arcs(): Arc[] {\n    return this._arcs;\n  }\n\n  setArcsCenter(containerWidth: number, containerHeight: number): void {\n    this._arcs.forEach(arc => arc.setCenter(containerWidth, containerHeight));\n  }\n\n  setArcsRadius(containerWidth: number): void {\n    this._arcs.forEach(arc => arc.setRadius(containerWidth));\n  }\n\n  setArcsCoverage(percents: string[], circleLength: number): void {\n    this._arcs.forEach((arc, index) => {\n      arc.setCoverage(percents[index], circleLength, index);\n\n      this._storeArcLength.push(arc.arcLength);\n    });\n  }\n\n  setArcsOffset(circleLength: number): void {\n    this._arcs.forEach((arc, indx) => {\n      const prevLengthSum = this._storeArcLength.slice(0, indx).reduce(function(a, b) {\n        return a + b;\n      }, 0);\n      arc.setOffset(circleLength, prevLengthSum);\n    });\n  }\n\n  setArcsColor(colors: string[]): void {\n    this._arcs.forEach((arc, index) => arc.setColor(colors[index]));\n  }\n\n  setArcsGradients(gradients: string[][]): void {\n    const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');\n    this._svgGroup.svgElem.append(defs);\n    this._arcs.forEach((arc, indx) => arc.setGradient(gradients[indx], defs));\n  }\n\n  getCircleLength(containerWidth: number): number {\n    const pi = 3.142;\n    const r = containerWidth / 2 - 10;\n    const circleLength = 2 * pi * r;\n    return circleLength;\n  }\n\n  setText(parent: SVGElement): void {\n    this._textGroup.classList.add('chart-text');\n    if (parent.parentElement) {\n      parent.parentElement.append(this._textGroup);\n      this._textGroup.style.position = 'absolute';\n    }\n    const textAmount = document.createElement('div');\n    textAmount.classList.add('chart-number');\n    const textLabel = document.createElement('div');\n    textLabel.classList.add('chart-label');\n    this._text = [textAmount, textLabel];\n    this._text.forEach(text => {\n      this._textGroup.append(text);\n    });\n  }\n\n  showText(indx: number): void {\n    if (this._options.amountAbs) {\n      this._text[0].innerHTML = this._options.amountAbs[indx].toString();\n    }\n    this._text[1].innerHTML = 'голосов';\n    if (this._options.colors) {\n      this._textGroup.style.color = this._options.colors[indx];\n    } else if (this._options.gradients) {\n      this._textGroup.style.color = this._options.gradients[indx][0];\n    }\n  }\n}\n\nexport { Chart };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=n[o]||(n[o]={});return i[e]&&i[e].hash===t?i[e]:(r.hash=t,i[e]=r)}();class g{constructor(e,t){if(h.f[0]++,h.s[0]++,this._options=t,h.s[1]++,this._svgGroup=new d(e),h.s[2]++,this._arcs=[],h.s[3]++,this._storeArcLength=[],h.s[4]++,this._text=[],h.s[5]++,this._textGroup=document.createElement("div"),h.s[6]++,this.setArcsParameters(e,t),h.s[7]++,t.chartOptions){h.b[0][0]++;const n=(h.s[8]++,new m(t.chartOptions,t.colors,t.gradients));h.s[9]++,e.after(n.elem)}else h.b[0][1]++;h.s[10]++,this._arcs.forEach((e,t)=>{h.f[1]++,h.s[11]++,e.elem.addEventListener("mouseover",this.showText.bind(this,t))}),h.s[12]++,this.setText(this._svgGroup.svgElem)}setArcsParameters(e,t){h.f[2]++,h.s[13]++,t.amountPrc?(h.b[1][0]++,h.s[14]++,this._arcs=t.amountPrc.map(()=>(h.f[3]++,h.s[15]++,new f(this._svgGroup.gElem))),h.s[16]++,this.setArcsCoverage(t.amountPrc,this.getCircleLength(e.offsetWidth)),h.s[17]++,this.setArcsRadius(e.offsetWidth),h.s[18]++,this.setArcsCenter(e.offsetWidth,e.offsetHeight),h.s[19]++,this.setArcsOffset(this.getCircleLength(e.offsetWidth))):h.b[1][1]++,h.s[20]++,t.colors?(h.b[2][0]++,h.s[21]++,this.setArcsColor(t.colors)):h.b[2][1]++,h.s[22]++,t.gradients?(h.b[3][0]++,h.s[23]++,this.setArcsGradients(t.gradients)):h.b[3][1]++}get arcs(){return h.f[4]++,h.s[24]++,this._arcs}setArcsCenter(e,t){h.f[5]++,h.s[25]++,this._arcs.forEach(n=>(h.f[6]++,h.s[26]++,n.setCenter(e,t)))}setArcsRadius(e){h.f[7]++,h.s[27]++,this._arcs.forEach(t=>(h.f[8]++,h.s[28]++,t.setRadius(e)))}setArcsCoverage(e,t){h.f[9]++,h.s[29]++,this._arcs.forEach((n,o)=>{h.f[10]++,h.s[30]++,n.setCoverage(e[o],t,o),h.s[31]++,this._storeArcLength.push(n.arcLength)})}setArcsOffset(e){h.f[11]++,h.s[32]++,this._arcs.forEach((t,n)=>{h.f[12]++;const o=(h.s[33]++,this._storeArcLength.slice(0,n).reduce((function(e,t){return h.f[13]++,h.s[34]++,e+t}),0));h.s[35]++,t.setOffset(e,o)})}setArcsColor(e){h.f[14]++,h.s[36]++,this._arcs.forEach((t,n)=>(h.f[15]++,h.s[37]++,t.setColor(e[n])))}setArcsGradients(e){h.f[16]++;const t=(h.s[38]++,document.createElementNS("http://www.w3.org/2000/svg","defs"));h.s[39]++,this._svgGroup.svgElem.append(t),h.s[40]++,this._arcs.forEach((n,o)=>(h.f[17]++,h.s[41]++,n.setGradient(e[o],t)))}getCircleLength(e){h.f[18]++;const t=(h.s[42]++,3.142),n=(h.s[43]++,e/2-10),o=(h.s[44]++,2*t*n);return h.s[45]++,o}setText(e){h.f[19]++,h.s[46]++,this._textGroup.classList.add("chart-text"),h.s[47]++,e.parentElement?(h.b[4][0]++,h.s[48]++,e.parentElement.append(this._textGroup),h.s[49]++,this._textGroup.style.position="absolute"):h.b[4][1]++;const t=(h.s[50]++,document.createElement("div"));h.s[51]++,t.classList.add("chart-number");const n=(h.s[52]++,document.createElement("div"));h.s[53]++,n.classList.add("chart-label"),h.s[54]++,this._text=[t,n],h.s[55]++,this._text.forEach(e=>{h.f[20]++,h.s[56]++,this._textGroup.append(e)})}showText(e){h.f[21]++,h.s[57]++,this._options.amountAbs?(h.b[5][0]++,h.s[58]++,this._text[0].innerHTML=this._options.amountAbs[e].toString()):h.b[5][1]++,h.s[59]++,this._text[1].innerHTML="голосов",h.s[60]++,this._options.colors?(h.b[6][0]++,h.s[61]++,this._textGroup.style.color=this._options.colors[e]):(h.b[6][1]++,h.s[62]++,this._options.gradients?(h.b[7][0]++,h.s[63]++,this._textGroup.style.color=this._options.gradients[e][0]):h.b[7][1]++)}}n.d(t,"a",(function(){return y}));var v=function(){var e="/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/Facade.ts",t="f717827457f519bda386e7da562a7544342df012",n=new(0,function(){}.constructor)("return this")(),o="__coverage__",r={path:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/Facade.ts",statementMap:{0:{start:{line:5,column:8},end:{line:5,column:41}},1:{start:{line:6,column:8},end:{line:6,column:61}},2:{start:{line:9,column:8},end:{line:9,column:27}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:4},end:{line:4,column:5}},loc:{start:{line:4,column:33},end:{line:7,column:5}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:16},end:{line:10,column:5}},line:8}},branchMap:{},s:{0:0,1:0,2:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/Facade.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/Facade.ts"],names:[],mappings:"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAGrC,MAAM,MAAM;IAGV,YAAY,MAAmB,EAAE,OAAgB;QAC/C,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF;AAED,OAAO,EAAE,MAAM,EAAE,CAAC",sourcesContent:["import { Model } from './model/Model';\nimport { Chart } from './view/Chart';\nimport { Options } from './model/Options';\n\nclass Facade {\n  private _model: Model;\n  private _chart: Chart;\n  constructor(parent: HTMLElement, options: Options) {\n    this._model = new Model(options);\n    this._chart = new Chart(parent, this._model.options);\n  }\n\n  get chart(): Chart {\n    return this._chart;\n  }\n}\n\nexport { Facade };\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=n[o]||(n[o]={});return i[e]&&i[e].hash===t?i[e]:(r.hash=t,i[e]=r)}();class y{constructor(e,t){v.f[0]++,v.s[0]++,this._model=new c(t),v.s[1]++,this._chart=new g(e,this._model.options)}get chart(){return v.f[1]++,v.s[2]++,this._chart}}},function(e,t,n){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),A=[];function s(e){for(var t=-1,n=0;n<A.length;n++)if(A[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},o=[],r=0;r<e.length;r++){var i=e[r],l=t.base?i[0]+t.base:i[0],a=n[l]||0,c="".concat(l," ").concat(a);n[l]=a+1;var u=s(c),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(A[u].references++,A[u].updater(d)):A.push({identifier:c,updater:m(d,t),references:1}),o.push(c)}return o}function a(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=n.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var A=i(e.insert||"head");if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=u(t,r);else{var i=document.createTextNode(r),A=e.childNodes;A[t]&&e.removeChild(A[t]),A.length?e.insertBefore(i,A[t]):e.appendChild(i)}}function C(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var f=null,p=0;function m(e,t){var n,o,r;if(t.singleton){var i=p++;n=f||(f=a(t)),o=d.bind(null,n,i,!1),r=d.bind(null,n,i,!0)}else n=a(t),o=C.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=s(n[o]);A[r].references--}for(var i=l(e,t),a=0;a<n.length;a++){var c=s(n[a]);0===A[c].references&&(A[c].updater(),A.splice(c,1))}n=i}}}},function(e,t,n){n(3),e.exports=n(7)},function(e,t,n){"use strict";n.r(t),function(e){n(5);var t,o,r,i,A,s,l=n(0),a=(t="/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/index.ts",o="1dffbb19e3a55fb5db6d273048fb8d37559a8c96",r=new(0,function(){}.constructor)("return this")(),A={path:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/index.ts",statementMap:{0:{start:{line:3,column:0},end:{line:8,column:3}},1:{start:{line:4,column:4},end:{line:7,column:6}},2:{start:{line:5,column:23},end:{line:5,column:55}},3:{start:{line:6,column:8},end:{line:6,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:3,column:2},end:{line:3,column:3}},loc:{start:{line:3,column:14},end:{line:8,column:1}},line:3},1:{name:"(anonymous_1)",decl:{start:{line:4,column:22},end:{line:4,column:23}},loc:{start:{line:4,column:41},end:{line:7,column:5}},line:4}},branchMap:{},s:{0:0,1:0,2:0,3:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/index.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/index.ts"],names:[],mappings:"AAAA,OAAO,yBAAyB,CAAC;AACjC,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,CAAC,CAAC;IACA,CAAC,CAAC,EAAE,CAAC,UAAU,GAAG,UAAS,OAAO;QAChC,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC",sourcesContent:["import './assets/scss/main.scss';\nimport { Facade } from '../src/Facade';\n\n$(function() {\n  $.fn.donutChart = function(options): Facade {\n    const facade: Facade = new Facade(this.get(0), options);\n    return facade;\n  };\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(s=r[i="__coverage__"]||(r[i]={}))[t]&&s[t].hash===o?s[t]:(A.hash=o,s[t]=A));a.s[0]++,e((function(){a.f[0]++,a.s[1]++,e.fn.donutChart=function(e){a.f[1]++;const t=(a.s[2]++,new l.a(this.get(0),e));return a.s[3]++,t}}))}.call(this,n(4))},function(e,t,n){var o;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var i=[],A=n.document,s=Object.getPrototypeOf,l=i.slice,a=i.concat,c=i.push,u=i.indexOf,d={},C=d.toString,f=d.hasOwnProperty,p=f.toString,m=p.call(Object),h={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},v=function(e){return null!=e&&e===e.window},y={type:!0,src:!0,nonce:!0,noModule:!0};function E(e,t,n){var o,r,i=(n=n||A).createElement("script");if(i.text=e,t)for(o in y)(r=t[o]||t.getAttribute&&t.getAttribute(o))&&i.setAttribute(o,r);n.head.appendChild(i).parentNode.removeChild(i)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[C.call(e)]||"object":typeof e}var I=function(e,t){return new I.fn.init(e,t)},x=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function G(e){var t=!!e&&"length"in e&&e.length,n=b(e);return!g(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}I.fn=I.prototype={jquery:"3.4.1",constructor:I,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=I.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return I.each(this,e)},map:function(e){return this.pushStack(I.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},I.extend=I.fn.extend=function(){var e,t,n,o,r,i,A=arguments[0]||{},s=1,l=arguments.length,a=!1;for("boolean"==typeof A&&(a=A,A=arguments[s]||{},s++),"object"==typeof A||g(A)||(A={}),s===l&&(A=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)o=e[t],"__proto__"!==t&&A!==o&&(a&&o&&(I.isPlainObject(o)||(r=Array.isArray(o)))?(n=A[t],i=r&&!Array.isArray(n)?[]:r||I.isPlainObject(n)?n:{},r=!1,A[t]=I.extend(a,i,o)):void 0!==o&&(A[t]=o));return A},I.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==C.call(e))&&(!(t=s(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){E(e,{nonce:t&&t.nonce})},each:function(e,t){var n,o=0;if(G(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},trim:function(e){return null==e?"":(e+"").replace(x,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(G(Object(e))?I.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,o=0,r=e.length;o<n;o++)e[r++]=t[o];return e.length=r,e},grep:function(e,t,n){for(var o=[],r=0,i=e.length,A=!n;r<i;r++)!t(e[r],r)!==A&&o.push(e[r]);return o},map:function(e,t,n){var o,r,i=0,A=[];if(G(e))for(o=e.length;i<o;i++)null!=(r=t(e[i],i,n))&&A.push(r);else for(i in e)null!=(r=t(e[i],i,n))&&A.push(r);return a.apply([],A)},guid:1,support:h}),"function"==typeof Symbol&&(I.fn[Symbol.iterator]=i[Symbol.iterator]),I.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var t,n,o,r,i,A,s,l,a,c,u,d,C,f,p,m,h,g,v,y="sizzle"+1*new Date,E=e.document,b=0,I=0,x=le(),G=le(),S=le(),_=le(),w=function(e,t){return e===t&&(u=!0),0},M={}.hasOwnProperty,O=[],D=O.pop,Q=O.push,T=O.push,k=O.slice,B=function(e,t){for(var n=0,o=e.length;n<o;n++)if(e[n]===t)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",Y="\\["+N+"*("+j+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+N+"*\\]",K=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+Y+")*)|.*)\\)|)",F=new RegExp(N+"+","g"),H=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),q=new RegExp("^"+N+"*,"+N+"*"),U=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),P=new RegExp(N+"|>"),W=new RegExp(K),R=new RegExp("^"+j+"$"),$={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+Y),PSEUDO:new RegExp("^"+K),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},z=/HTML$/i,V=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+N+"?|("+N+")|.)","ig"),ne=function(e,t,n){var o="0x"+t-65536;return o!=o||n?t:o<0?String.fromCharCode(o+65536):String.fromCharCode(o>>10|55296,1023&o|56320)},oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){d()},Ae=ye((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{T.apply(O=k.call(E.childNodes),E.childNodes),O[E.childNodes.length].nodeType}catch(e){T={apply:O.length?function(e,t){Q.apply(e,k.call(t))}:function(e,t){for(var n=e.length,o=0;e[n++]=t[o++];);e.length=n-1}}}function se(e,t,o,r){var i,s,a,c,u,f,h,g=t&&t.ownerDocument,b=t?t.nodeType:9;if(o=o||[],"string"!=typeof e||!e||1!==b&&9!==b&&11!==b)return o;if(!r&&((t?t.ownerDocument||t:E)!==C&&d(t),t=t||C,p)){if(11!==b&&(u=Z.exec(e)))if(i=u[1]){if(9===b){if(!(a=t.getElementById(i)))return o;if(a.id===i)return o.push(a),o}else if(g&&(a=g.getElementById(i))&&v(t,a)&&a.id===i)return o.push(a),o}else{if(u[2])return T.apply(o,t.getElementsByTagName(e)),o;if((i=u[3])&&n.getElementsByClassName&&t.getElementsByClassName)return T.apply(o,t.getElementsByClassName(i)),o}if(n.qsa&&!_[e+" "]&&(!m||!m.test(e))&&(1!==b||"object"!==t.nodeName.toLowerCase())){if(h=e,g=t,1===b&&P.test(e)){for((c=t.getAttribute("id"))?c=c.replace(oe,re):t.setAttribute("id",c=y),s=(f=A(e)).length;s--;)f[s]="#"+c+" "+ve(f[s]);h=f.join(","),g=ee.test(e)&&he(t.parentNode)||t}try{return T.apply(o,g.querySelectorAll(h)),o}catch(t){_(e,!0)}finally{c===y&&t.removeAttribute("id")}}}return l(e.replace(H,"$1"),t,o,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>o.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ae(e){return e[y]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),r=n.length;r--;)o.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,o=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(o)return o;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function Ce(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ae((function(t){return t=+t,ae((function(n,o){for(var r,i=e([],n.length,t),A=i.length;A--;)n[r=i[A]]&&(n[r]=!(o[r]=n[r]))}))}))}function he(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!z.test(t||n&&n.nodeName||"HTML")},d=se.setDocument=function(e){var t,r,A=e?e.ownerDocument||e:E;return A!==C&&9===A.nodeType&&A.documentElement?(f=(C=A).documentElement,p=!i(C),E!==C&&(r=C.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(C.getElementsByClassName),n.getById=ce((function(e){return f.appendChild(e).id=y,!C.getElementsByName||!C.getElementsByName(y).length})),n.getById?(o.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},o.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n=t.getElementById(e);return n?[n]:[]}}):(o.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},o.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n,o,r,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(r=t.getElementsByName(e),o=0;i=r[o++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),o.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,o=[],r=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[r++];)1===n.nodeType&&o.push(n);return o}return i},o.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&p)return t.getElementsByClassName(e)},h=[],m=[],(n.qsa=J.test(C.querySelectorAll))&&(ce((function(e){f.appendChild(e).innerHTML="<a id='"+y+"'></a><select id='"+y+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+N+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+N+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+y+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+y+"+*").length||m.push(".#.+[+~]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+N+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(g=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),h.push("!=",K)})),m=m.length&&new RegExp(m.join("|")),h=h.length&&new RegExp(h.join("|")),t=J.test(f.compareDocumentPosition),v=t||J.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,o=t&&t.parentNode;return e===o||!(!o||1!==o.nodeType||!(n.contains?n.contains(o):e.compareDocumentPosition&&16&e.compareDocumentPosition(o)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},w=t?function(e,t){if(e===t)return u=!0,0;var o=!e.compareDocumentPosition-!t.compareDocumentPosition;return o||(1&(o=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===o?e===C||e.ownerDocument===E&&v(E,e)?-1:t===C||t.ownerDocument===E&&v(E,t)?1:c?B(c,e)-B(c,t):0:4&o?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,o=0,r=e.parentNode,i=t.parentNode,A=[e],s=[t];if(!r||!i)return e===C?-1:t===C?1:r?-1:i?1:c?B(c,e)-B(c,t):0;if(r===i)return de(e,t);for(n=e;n=n.parentNode;)A.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;A[o]===s[o];)o++;return o?de(A[o],s[o]):A[o]===E?-1:s[o]===E?1:0},C):C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&d(e),n.matchesSelector&&p&&!_[t+" "]&&(!h||!h.test(t))&&(!m||!m.test(t)))try{var o=g.call(e,t);if(o||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return o}catch(e){_(t,!0)}return se(t,C,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==C&&d(e),v(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==C&&d(e);var r=o.attrHandle[t.toLowerCase()],i=r&&M.call(o.attrHandle,t.toLowerCase())?r(e,t,!p):void 0;return void 0!==i?i:n.attributes||!p?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(oe,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,o=[],r=0,i=0;if(u=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(w),u){for(;t=e[i++];)t===e[i]&&(r=o.push(i));for(;r--;)e.splice(o[r],1)}return c=null,e},r=se.getText=function(e){var t,n="",o=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[o++];)n+=r(t);return n},(o=se.selectors={cacheLength:50,createPseudo:ae,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=A(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&x(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(o){var r=se.attr(o,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,o,r){var i="nth"!==e.slice(0,3),A="last"!==e.slice(-4),s="of-type"===t;return 1===o&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var a,c,u,d,C,f,p=i!==A?"nextSibling":"previousSibling",m=t.parentNode,h=s&&t.nodeName.toLowerCase(),g=!l&&!s,v=!1;if(m){if(i){for(;p;){for(d=t;d=d[p];)if(s?d.nodeName.toLowerCase()===h:1===d.nodeType)return!1;f=p="only"===e&&!f&&"nextSibling"}return!0}if(f=[A?m.firstChild:m.lastChild],A&&g){for(v=(C=(a=(c=(u=(d=m)[y]||(d[y]={}))[d.uniqueID]||(u[d.uniqueID]={}))[e]||[])[0]===b&&a[1])&&a[2],d=C&&m.childNodes[C];d=++C&&d&&d[p]||(v=C=0)||f.pop();)if(1===d.nodeType&&++v&&d===t){c[e]=[b,C,v];break}}else if(g&&(v=C=(a=(c=(u=(d=t)[y]||(d[y]={}))[d.uniqueID]||(u[d.uniqueID]={}))[e]||[])[0]===b&&a[1]),!1===v)for(;(d=++C&&d&&d[p]||(v=C=0)||f.pop())&&((s?d.nodeName.toLowerCase()!==h:1!==d.nodeType)||!++v||(g&&((c=(u=d[y]||(d[y]={}))[d.uniqueID]||(u[d.uniqueID]={}))[e]=[b,v]),d!==t)););return(v-=r)===o||v%o==0&&v/o>=0}}},PSEUDO:function(e,t){var n,r=o.pseudos[e]||o.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[y]?r(t):r.length>1?(n=[e,e,"",t],o.setFilters.hasOwnProperty(e.toLowerCase())?ae((function(e,n){for(var o,i=r(e,t),A=i.length;A--;)e[o=B(e,i[A])]=!(n[o]=i[A])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ae((function(e){var t=[],n=[],o=s(e.replace(H,"$1"));return o[y]?ae((function(e,t,n,r){for(var i,A=o(e,null,r,[]),s=e.length;s--;)(i=A[s])&&(e[s]=!(t[s]=i))})):function(e,r,i){return t[0]=e,o(t,null,i,n),t[0]=null,!n.pop()}})),has:ae((function(e){return function(t){return se(e,t).length>0}})),contains:ae((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:ae((function(e){return R.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=p?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!o.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var o=n<0?n+t:n>t?t:n;--o>=0;)e.push(o);return e})),gt:me((function(e,t,n){for(var o=n<0?n+t:n;++o<t;)e.push(o);return e}))}}).pseudos.nth=o.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[t]=Ce(t);for(t in{submit:!0,reset:!0})o.pseudos[t]=fe(t);function ge(){}function ve(e){for(var t=0,n=e.length,o="";t<n;t++)o+=e[t].value;return o}function ye(e,t,n){var o=t.dir,r=t.next,i=r||o,A=n&&"parentNode"===i,s=I++;return t.first?function(t,n,r){for(;t=t[o];)if(1===t.nodeType||A)return e(t,n,r);return!1}:function(t,n,l){var a,c,u,d=[b,s];if(l){for(;t=t[o];)if((1===t.nodeType||A)&&e(t,n,l))return!0}else for(;t=t[o];)if(1===t.nodeType||A)if(c=(u=t[y]||(t[y]={}))[t.uniqueID]||(u[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[o]||t;else{if((a=c[i])&&a[0]===b&&a[1]===s)return d[2]=a[2];if(c[i]=d,d[2]=e(t,n,l))return!0}return!1}}function Ee(e){return e.length>1?function(t,n,o){for(var r=e.length;r--;)if(!e[r](t,n,o))return!1;return!0}:e[0]}function be(e,t,n,o,r){for(var i,A=[],s=0,l=e.length,a=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,o,r)||(A.push(i),a&&t.push(s)));return A}function Ie(e,t,n,o,r,i){return o&&!o[y]&&(o=Ie(o)),r&&!r[y]&&(r=Ie(r,i)),ae((function(i,A,s,l){var a,c,u,d=[],C=[],f=A.length,p=i||function(e,t,n){for(var o=0,r=t.length;o<r;o++)se(e,t[o],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!i&&t?p:be(p,d,e,s,l),h=n?r||(i?e:f||o)?[]:A:m;if(n&&n(m,h,s,l),o)for(a=be(h,C),o(a,[],s,l),c=a.length;c--;)(u=a[c])&&(h[C[c]]=!(m[C[c]]=u));if(i){if(r||e){if(r){for(a=[],c=h.length;c--;)(u=h[c])&&a.push(m[c]=u);r(null,h=[],a,l)}for(c=h.length;c--;)(u=h[c])&&(a=r?B(i,u):d[c])>-1&&(i[a]=!(A[a]=u))}}else h=be(h===A?h.splice(f,h.length):h),r?r(null,A,h,l):T.apply(A,h)}))}function xe(e){for(var t,n,r,i=e.length,A=o.relative[e[0].type],s=A||o.relative[" "],l=A?1:0,c=ye((function(e){return e===t}),s,!0),u=ye((function(e){return B(t,e)>-1}),s,!0),d=[function(e,n,o){var r=!A&&(o||n!==a)||((t=n).nodeType?c(e,n,o):u(e,n,o));return t=null,r}];l<i;l++)if(n=o.relative[e[l].type])d=[ye(Ee(d),n)];else{if((n=o.filter[e[l].type].apply(null,e[l].matches))[y]){for(r=++l;r<i&&!o.relative[e[r].type];r++);return Ie(l>1&&Ee(d),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(H,"$1"),n,l<r&&xe(e.slice(l,r)),r<i&&xe(e=e.slice(r)),r<i&&ve(e))}d.push(n)}return Ee(d)}return ge.prototype=o.filters=o.pseudos,o.setFilters=new ge,A=se.tokenize=function(e,t){var n,r,i,A,s,l,a,c=G[e+" "];if(c)return t?0:c.slice(0);for(s=e,l=[],a=o.preFilter;s;){for(A in n&&!(r=q.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(i=[])),n=!1,(r=U.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(H," ")}),s=s.slice(n.length)),o.filter)!(r=$[A].exec(s))||a[A]&&!(r=a[A](r))||(n=r.shift(),i.push({value:n,type:A,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):G(e,l).slice(0)},s=se.compile=function(e,t){var n,r=[],i=[],s=S[e+" "];if(!s){for(t||(t=A(e)),n=t.length;n--;)(s=xe(t[n]))[y]?r.push(s):i.push(s);(s=S(e,function(e,t){var n=t.length>0,r=e.length>0,i=function(i,A,s,l,c){var u,f,m,h=0,g="0",v=i&&[],y=[],E=a,I=i||r&&o.find.TAG("*",c),x=b+=null==E?1:Math.random()||.1,G=I.length;for(c&&(a=A===C||A||c);g!==G&&null!=(u=I[g]);g++){if(r&&u){for(f=0,A||u.ownerDocument===C||(d(u),s=!p);m=e[f++];)if(m(u,A||C,s)){l.push(u);break}c&&(b=x)}n&&((u=!m&&u)&&h--,i&&v.push(u))}if(h+=g,n&&g!==h){for(f=0;m=t[f++];)m(v,y,A,s);if(i){if(h>0)for(;g--;)v[g]||y[g]||(y[g]=D.call(l));y=be(y)}T.apply(l,y),c&&!i&&y.length>0&&h+t.length>1&&se.uniqueSort(l)}return c&&(b=x,a=E),v};return n?ae(i):i}(i,r))).selector=e}return s},l=se.select=function(e,t,n,r){var i,l,a,c,u,d="function"==typeof e&&e,C=!r&&A(e=d.selector||e);if(n=n||[],1===C.length){if((l=C[0]=C[0].slice(0)).length>2&&"ID"===(a=l[0]).type&&9===t.nodeType&&p&&o.relative[l[1].type]){if(!(t=(o.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=$.needsContext.test(e)?0:l.length;i--&&(a=l[i],!o.relative[c=a.type]);)if((u=o.find[c])&&(r=u(a.matches[0].replace(te,ne),ee.test(l[0].type)&&he(t.parentNode)||t))){if(l.splice(i,1),!(e=r.length&&ve(l)))return T.apply(n,r),n;break}}return(d||s(e,C))(r,t,!p,n,!t||ee.test(e)&&he(t.parentNode)||t),n},n.sortStable=y.split("").sort(w).join("")===y,n.detectDuplicates=!!u,d(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ue("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ue("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||ue(L,(function(e,t,n){var o;if(!n)return!0===e[t]?t.toLowerCase():(o=e.getAttributeNode(t))&&o.specified?o.value:null})),se}(n);I.find=S,I.expr=S.selectors,I.expr[":"]=I.expr.pseudos,I.uniqueSort=I.unique=S.uniqueSort,I.text=S.getText,I.isXMLDoc=S.isXML,I.contains=S.contains,I.escapeSelector=S.escape;var _=function(e,t,n){for(var o=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&I(e).is(n))break;o.push(e)}return o},w=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},M=I.expr.match.needsContext;function O(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function Q(e,t,n){return g(t)?I.grep(e,(function(e,o){return!!t.call(e,o,e)!==n})):t.nodeType?I.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?I.grep(e,(function(e){return u.call(t,e)>-1!==n})):I.filter(t,e,n)}I.filter=function(e,t,n){var o=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===o.nodeType?I.find.matchesSelector(o,e)?[o]:[]:I.find.matches(e,I.grep(t,(function(e){return 1===e.nodeType})))},I.fn.extend({find:function(e){var t,n,o=this.length,r=this;if("string"!=typeof e)return this.pushStack(I(e).filter((function(){for(t=0;t<o;t++)if(I.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<o;t++)I.find(e,r[t],n);return o>1?I.uniqueSort(n):n},filter:function(e){return this.pushStack(Q(this,e||[],!1))},not:function(e){return this.pushStack(Q(this,e||[],!0))},is:function(e){return!!Q(this,"string"==typeof e&&M.test(e)?I(e):e||[],!1).length}});var T,k=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(I.fn.init=function(e,t,n){var o,r;if(!e)return this;if(n=n||T,"string"==typeof e){if(!(o="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:k.exec(e))||!o[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(o[1]){if(t=t instanceof I?t[0]:t,I.merge(this,I.parseHTML(o[1],t&&t.nodeType?t.ownerDocument||t:A,!0)),D.test(o[1])&&I.isPlainObject(t))for(o in t)g(this[o])?this[o](t[o]):this.attr(o,t[o]);return this}return(r=A.getElementById(o[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(I):I.makeArray(e,this)}).prototype=I.fn,T=I(A);var B=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}I.fn.extend({has:function(e){var t=I(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(I.contains(this,t[e]))return!0}))},closest:function(e,t){var n,o=0,r=this.length,i=[],A="string"!=typeof e&&I(e);if(!M.test(e))for(;o<r;o++)for(n=this[o];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(A?A.index(n)>-1:1===n.nodeType&&I.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?I.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?u.call(I(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(I.uniqueSort(I.merge(this.get(),I(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),I.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _(e,"parentNode")},parentsUntil:function(e,t,n){return _(e,"parentNode",n)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return _(e,"nextSibling")},prevAll:function(e){return _(e,"previousSibling")},nextUntil:function(e,t,n){return _(e,"nextSibling",n)},prevUntil:function(e,t,n){return _(e,"previousSibling",n)},siblings:function(e){return w((e.parentNode||{}).firstChild,e)},children:function(e){return w(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(O(e,"template")&&(e=e.content||e),I.merge([],e.childNodes))}},(function(e,t){I.fn[e]=function(n,o){var r=I.map(this,t,n);return"Until"!==e.slice(-5)&&(o=n),o&&"string"==typeof o&&(r=I.filter(o,r)),this.length>1&&(L[e]||I.uniqueSort(r),B.test(e)&&r.reverse()),this.pushStack(r)}}));var j=/[^\x20\t\r\n\f]+/g;function Y(e){return e}function K(e){throw e}function F(e,t,n,o){var r;try{e&&g(r=e.promise)?r.call(e).done(t).fail(n):e&&g(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(o))}catch(e){n.apply(void 0,[e])}}I.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return I.each(e.match(j)||[],(function(e,n){t[n]=!0})),t}(e):I.extend({},e);var t,n,o,r,i=[],A=[],s=-1,l=function(){for(r=r||e.once,o=t=!0;A.length;s=-1)for(n=A.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,r&&(i=n?[]:"")},a={add:function(){return i&&(n&&!t&&(s=i.length-1,A.push(n)),function t(n){I.each(n,(function(n,o){g(o)?e.unique&&a.has(o)||i.push(o):o&&o.length&&"string"!==b(o)&&t(o)}))}(arguments),n&&!t&&l()),this},remove:function(){return I.each(arguments,(function(e,t){for(var n;(n=I.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?I.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return r=A=[],i=n="",this},disabled:function(){return!i},lock:function(){return r=A=[],n||t||(i=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],A.push(n),t||l()),this},fire:function(){return a.fireWith(this,arguments),this},fired:function(){return!!o}};return a},I.extend({Deferred:function(e){var t=[["notify","progress",I.Callbacks("memory"),I.Callbacks("memory"),2],["resolve","done",I.Callbacks("once memory"),I.Callbacks("once memory"),0,"resolved"],["reject","fail",I.Callbacks("once memory"),I.Callbacks("once memory"),1,"rejected"]],o="pending",r={state:function(){return o},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return I.Deferred((function(n){I.each(t,(function(t,o){var r=g(e[o[4]])&&e[o[4]];i[o[1]]((function(){var e=r&&r.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,o,r){var i=0;function A(e,t,o,r){return function(){var s=this,l=arguments,a=function(){var n,a;if(!(e<i)){if((n=o.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");a=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(a)?r?a.call(n,A(i,t,Y,r),A(i,t,K,r)):(i++,a.call(n,A(i,t,Y,r),A(i,t,K,r),A(i,t,Y,t.notifyWith))):(o!==Y&&(s=void 0,l=[n]),(r||t.resolveWith)(s,l))}},c=r?a:function(){try{a()}catch(n){I.Deferred.exceptionHook&&I.Deferred.exceptionHook(n,c.stackTrace),e+1>=i&&(o!==K&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?c():(I.Deferred.getStackHook&&(c.stackTrace=I.Deferred.getStackHook()),n.setTimeout(c))}}return I.Deferred((function(n){t[0][3].add(A(0,n,g(r)?r:Y,n.notifyWith)),t[1][3].add(A(0,n,g(e)?e:Y)),t[2][3].add(A(0,n,g(o)?o:K))})).promise()},promise:function(e){return null!=e?I.extend(e,r):r}},i={};return I.each(t,(function(e,n){var A=n[2],s=n[5];r[n[1]]=A.add,s&&A.add((function(){o=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),A.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=A.fireWith})),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,o=Array(n),r=l.call(arguments),i=I.Deferred(),A=function(e){return function(n){o[e]=this,r[e]=arguments.length>1?l.call(arguments):n,--t||i.resolveWith(o,r)}};if(t<=1&&(F(e,i.done(A(n)).resolve,i.reject,!t),"pending"===i.state()||g(r[n]&&r[n].then)))return i.then();for(;n--;)F(r[n],A(n),i.reject);return i.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;I.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&H.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},I.readyException=function(e){n.setTimeout((function(){throw e}))};var q=I.Deferred();function U(){A.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),I.ready()}I.fn.ready=function(e){return q.then(e).catch((function(e){I.readyException(e)})),this},I.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--I.readyWait:I.isReady)||(I.isReady=!0,!0!==e&&--I.readyWait>0||q.resolveWith(A,[I]))}}),I.ready.then=q.then,"complete"===A.readyState||"loading"!==A.readyState&&!A.documentElement.doScroll?n.setTimeout(I.ready):(A.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var P=function(e,t,n,o,r,i,A){var s=0,l=e.length,a=null==n;if("object"===b(n))for(s in r=!0,n)P(e,t,s,n[s],!0,i,A);else if(void 0!==o&&(r=!0,g(o)||(A=!0),a&&(A?(t.call(e,o),t=null):(a=t,t=function(e,t,n){return a.call(I(e),n)})),t))for(;s<l;s++)t(e[s],n,A?o:o.call(e[s],s,t(e[s],n)));return r?e:a?t.call(e):l?t(e[0],n):i},W=/^-ms-/,R=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function z(e){return e.replace(W,"ms-").replace(R,$)}var V=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=I.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var o,r=this.cache(e);if("string"==typeof t)r[z(t)]=n;else for(o in t)r[z(o)]=t[o];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][z(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,o=e[this.expando];if(void 0!==o){if(void 0!==t){n=(t=Array.isArray(t)?t.map(z):(t=z(t))in o?[t]:t.match(j)||[]).length;for(;n--;)delete o[t[n]]}(void 0===t||I.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!I.isEmptyObject(t)}};var J=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var o;if(void 0===n&&1===e.nodeType)if(o="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(o))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}I.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),I.fn.extend({data:function(e,t){var n,o,r,i=this[0],A=i&&i.attributes;if(void 0===e){if(this.length&&(r=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(n=A.length;n--;)A[n]&&0===(o=A[n].name).indexOf("data-")&&(o=z(o.slice(5)),ne(i,o,r[o]));J.set(i,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Z.set(this,e)})):P(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),I.extend({queue:function(e,t,n){var o;if(e)return t=(t||"fx")+"queue",o=J.get(e,t),n&&(!o||Array.isArray(n)?o=J.access(e,t,I.makeArray(n)):o.push(n)),o||[]},dequeue:function(e,t){t=t||"fx";var n=I.queue(e,t),o=n.length,r=n.shift(),i=I._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),o--),r&&("fx"===t&&n.unshift("inprogress"),delete i.stop,r.call(e,(function(){I.dequeue(e,t)}),i)),!o&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:I.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),I.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?I.queue(this[0],e):void 0===t?this:this.each((function(){var n=I.queue(this,e,t);I._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&I.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){I.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,o=1,r=I.Deferred(),i=this,A=this.length,s=function(){--o||r.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";A--;)(n=J.get(i[A],e+"queueHooks"))&&n.empty&&(o++,n.empty.add(s));return s(),r.promise(t)}});var oe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+oe+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],Ae=A.documentElement,se=function(e){return I.contains(e.ownerDocument,e)},le={composed:!0};Ae.getRootNode&&(se=function(e){return I.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===I.css(e,"display")},ce=function(e,t,n,o){var r,i,A={};for(i in t)A[i]=e.style[i],e.style[i]=t[i];for(i in r=n.apply(e,o||[]),t)e.style[i]=A[i];return r};function ue(e,t,n,o){var r,i,A=20,s=o?function(){return o.cur()}:function(){return I.css(e,t,"")},l=s(),a=n&&n[3]||(I.cssNumber[t]?"":"px"),c=e.nodeType&&(I.cssNumber[t]||"px"!==a&&+l)&&re.exec(I.css(e,t));if(c&&c[3]!==a){for(l/=2,a=a||c[3],c=+l||1;A--;)I.style(e,t,c+a),(1-i)*(1-(i=s()/l||.5))<=0&&(A=0),c/=i;c*=2,I.style(e,t,c+a),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],o&&(o.unit=a,o.start=c,o.end=r)),r}var de={};function Ce(e){var t,n=e.ownerDocument,o=e.nodeName,r=de[o];return r||(t=n.body.appendChild(n.createElement(o)),r=I.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),de[o]=r,r)}function fe(e,t){for(var n,o,r=[],i=0,A=e.length;i<A;i++)(o=e[i]).style&&(n=o.style.display,t?("none"===n&&(r[i]=J.get(o,"display")||null,r[i]||(o.style.display="")),""===o.style.display&&ae(o)&&(r[i]=Ce(o))):"none"!==n&&(r[i]="none",J.set(o,"display",n)));for(i=0;i<A;i++)null!=r[i]&&(e[i].style.display=r[i]);return e}I.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ae(this)?I(this).show():I(this).hide()}))}});var pe=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&O(e,t)?I.merge([e],n):n}function ye(e,t){for(var n=0,o=e.length;n<o;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var Ee,be,Ie=/<|&#?\w+;/;function xe(e,t,n,o,r){for(var i,A,s,l,a,c,u=t.createDocumentFragment(),d=[],C=0,f=e.length;C<f;C++)if((i=e[C])||0===i)if("object"===b(i))I.merge(d,i.nodeType?[i]:i);else if(Ie.test(i)){for(A=A||u.appendChild(t.createElement("div")),s=(me.exec(i)||["",""])[1].toLowerCase(),l=ge[s]||ge._default,A.innerHTML=l[1]+I.htmlPrefilter(i)+l[2],c=l[0];c--;)A=A.lastChild;I.merge(d,A.childNodes),(A=u.firstChild).textContent=""}else d.push(t.createTextNode(i));for(u.textContent="",C=0;i=d[C++];)if(o&&I.inArray(i,o)>-1)r&&r.push(i);else if(a=se(i),A=ve(u.appendChild(i),"script"),a&&ye(A),n)for(c=0;i=A[c++];)he.test(i.type||"")&&n.push(i);return u}Ee=A.createDocumentFragment().appendChild(A.createElement("div")),(be=A.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),Ee.appendChild(be),h.checkClone=Ee.cloneNode(!0).cloneNode(!0).lastChild.checked,Ee.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!Ee.cloneNode(!0).lastChild.defaultValue;var Ge=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,_e=/^([^.]*)(?:\.(.+)|)/;function we(){return!0}function Me(){return!1}function Oe(e,t){return e===function(){try{return A.activeElement}catch(e){}}()==("focus"===t)}function De(e,t,n,o,r,i){var A,s;if("object"==typeof t){for(s in"string"!=typeof n&&(o=o||n,n=void 0),t)De(e,s,n,o,t[s],i);return e}if(null==o&&null==r?(r=n,o=n=void 0):null==r&&("string"==typeof n?(r=o,o=void 0):(r=o,o=n,n=void 0)),!1===r)r=Me;else if(!r)return e;return 1===i&&(A=r,(r=function(e){return I().off(e),A.apply(this,arguments)}).guid=A.guid||(A.guid=I.guid++)),e.each((function(){I.event.add(this,t,r,o,n)}))}function Qe(e,t,n){n?(J.set(e,t,!1),I.event.add(e,t,{namespace:!1,handler:function(e){var o,r,i=J.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(I.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=l.call(arguments),J.set(this,t,i),o=n(this,t),this[t](),i!==(r=J.get(this,t))||o?J.set(this,t,!1):r={},i!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else i.length&&(J.set(this,t,{value:I.event.trigger(I.extend(i[0],I.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&I.event.add(e,t,we)}I.event={global:{},add:function(e,t,n,o,r){var i,A,s,l,a,c,u,d,C,f,p,m=J.get(e);if(m)for(n.handler&&(n=(i=n).handler,r=i.selector),r&&I.find.matchesSelector(Ae,r),n.guid||(n.guid=I.guid++),(l=m.events)||(l=m.events={}),(A=m.handle)||(A=m.handle=function(t){return void 0!==I&&I.event.triggered!==t.type?I.event.dispatch.apply(e,arguments):void 0}),a=(t=(t||"").match(j)||[""]).length;a--;)C=p=(s=_e.exec(t[a])||[])[1],f=(s[2]||"").split(".").sort(),C&&(u=I.event.special[C]||{},C=(r?u.delegateType:u.bindType)||C,u=I.event.special[C]||{},c=I.extend({type:C,origType:p,data:o,handler:n,guid:n.guid,selector:r,needsContext:r&&I.expr.match.needsContext.test(r),namespace:f.join(".")},i),(d=l[C])||((d=l[C]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,o,f,A)||e.addEventListener&&e.addEventListener(C,A)),u.add&&(u.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,c):d.push(c),I.event.global[C]=!0)},remove:function(e,t,n,o,r){var i,A,s,l,a,c,u,d,C,f,p,m=J.hasData(e)&&J.get(e);if(m&&(l=m.events)){for(a=(t=(t||"").match(j)||[""]).length;a--;)if(C=p=(s=_e.exec(t[a])||[])[1],f=(s[2]||"").split(".").sort(),C){for(u=I.event.special[C]||{},d=l[C=(o?u.delegateType:u.bindType)||C]||[],s=s[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),A=i=d.length;i--;)c=d[i],!r&&p!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||o&&o!==c.selector&&("**"!==o||!c.selector)||(d.splice(i,1),c.selector&&d.delegateCount--,u.remove&&u.remove.call(e,c));A&&!d.length&&(u.teardown&&!1!==u.teardown.call(e,f,m.handle)||I.removeEvent(e,C,m.handle),delete l[C])}else for(C in l)I.event.remove(e,C+t[a],n,o,!0);I.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,o,r,i,A,s=I.event.fix(e),l=new Array(arguments.length),a=(J.get(this,"events")||{})[s.type]||[],c=I.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(A=I.event.handlers.call(this,s,a),t=0;(r=A[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==i.namespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(o=((I.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,l))&&!1===(s.result=o)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,o,r,i,A,s=[],l=t.delegateCount,a=e.target;if(l&&a.nodeType&&!("click"===e.type&&e.button>=1))for(;a!==this;a=a.parentNode||this)if(1===a.nodeType&&("click"!==e.type||!0!==a.disabled)){for(i=[],A={},n=0;n<l;n++)void 0===A[r=(o=t[n]).selector+" "]&&(A[r]=o.needsContext?I(r,this).index(a)>-1:I.find(r,this,null,[a]).length),A[r]&&i.push(o);i.length&&s.push({elem:a,handlers:i})}return a=this,l<t.length&&s.push({elem:a,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(I.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[I.expando]?e:new I.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&O(t,"input")&&Qe(t,"click",we),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&O(t,"input")&&Qe(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&O(t,"input")&&J.get(t,"click")||O(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},I.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},I.Event=function(e,t){if(!(this instanceof I.Event))return new I.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?we:Me,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&I.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[I.expando]=!0},I.Event.prototype={constructor:I.Event,isDefaultPrevented:Me,isPropagationStopped:Me,isImmediatePropagationStopped:Me,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},I.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ge.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},I.event.addProp),I.each({focus:"focusin",blur:"focusout"},(function(e,t){I.event.special[e]={setup:function(){return Qe(this,e,Oe),!1},trigger:function(){return Qe(this,e),!0},delegateType:t}})),I.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){I.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,o=this,r=e.relatedTarget,i=e.handleObj;return r&&(r===o||I.contains(o,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),I.fn.extend({on:function(e,t,n,o){return De(this,e,t,n,o)},one:function(e,t,n,o){return De(this,e,t,n,o,1)},off:function(e,t,n){var o,r;if(e&&e.preventDefault&&e.handleObj)return o=e.handleObj,I(e.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Me),this.each((function(){I.event.remove(this,e,n,t)}))}});var Te=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Be=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){return O(e,"table")&&O(11!==t.nodeType?t:t.firstChild,"tr")&&I(e).children("tbody")[0]||e}function je(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ye(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ke(e,t){var n,o,r,i,A,s,l,a;if(1===t.nodeType){if(J.hasData(e)&&(i=J.access(e),A=J.set(t,i),a=i.events))for(r in delete A.handle,A.events={},a)for(n=0,o=a[r].length;n<o;n++)I.event.add(t,r,a[r][n]);Z.hasData(e)&&(s=Z.access(e),l=I.extend({},s),Z.set(t,l))}}function Fe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function He(e,t,n,o){t=a.apply([],t);var r,i,A,s,l,c,u=0,d=e.length,C=d-1,f=t[0],p=g(f);if(p||d>1&&"string"==typeof f&&!h.checkClone&&Be.test(f))return e.each((function(r){var i=e.eq(r);p&&(t[0]=f.call(this,r,i.html())),He(i,t,n,o)}));if(d&&(i=(r=xe(t,e[0].ownerDocument,!1,e,o)).firstChild,1===r.childNodes.length&&(r=i),i||o)){for(s=(A=I.map(ve(r,"script"),je)).length;u<d;u++)l=r,u!==C&&(l=I.clone(l,!0,!0),s&&I.merge(A,ve(l,"script"))),n.call(e[u],l,u);if(s)for(c=A[A.length-1].ownerDocument,I.map(A,Ye),u=0;u<s;u++)l=A[u],he.test(l.type||"")&&!J.access(l,"globalEval")&&I.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?I._evalUrl&&!l.noModule&&I._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):E(l.textContent.replace(Le,""),l,c))}return e}function qe(e,t,n){for(var o,r=t?I.filter(t,e):e,i=0;null!=(o=r[i]);i++)n||1!==o.nodeType||I.cleanData(ve(o)),o.parentNode&&(n&&se(o)&&ye(ve(o,"script")),o.parentNode.removeChild(o));return e}I.extend({htmlPrefilter:function(e){return e.replace(Te,"<$1></$2>")},clone:function(e,t,n){var o,r,i,A,s=e.cloneNode(!0),l=se(e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||I.isXMLDoc(e)))for(A=ve(s),o=0,r=(i=ve(e)).length;o<r;o++)Fe(i[o],A[o]);if(t)if(n)for(i=i||ve(e),A=A||ve(s),o=0,r=i.length;o<r;o++)Ke(i[o],A[o]);else Ke(e,s);return(A=ve(s,"script")).length>0&&ye(A,!l&&ve(e,"script")),s},cleanData:function(e){for(var t,n,o,r=I.event.special,i=0;void 0!==(n=e[i]);i++)if(V(n)){if(t=n[J.expando]){if(t.events)for(o in t.events)r[o]?I.event.remove(n,o):I.removeEvent(n,o,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),I.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return P(this,(function(e){return void 0===e?I.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return He(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)}))},prepend:function(){return He(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return He(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return He(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(I.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return I.clone(this,e,t)}))},html:function(e){return P(this,(function(e){var t=this[0]||{},n=0,o=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ke.test(e)&&!ge[(me.exec(e)||["",""])[1].toLowerCase()]){e=I.htmlPrefilter(e);try{for(;n<o;n++)1===(t=this[n]||{}).nodeType&&(I.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,(function(t){var n=this.parentNode;I.inArray(this,e)<0&&(I.cleanData(ve(this)),n&&n.replaceChild(t,this))}),e)}}),I.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){I.fn[e]=function(e){for(var n,o=[],r=I(e),i=r.length-1,A=0;A<=i;A++)n=A===i?this:this.clone(!0),I(r[A])[t](n),c.apply(o,n.get());return this.pushStack(o)}}));var Ue=new RegExp("^("+oe+")(?!px)[a-z%]+$","i"),Pe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},We=new RegExp(ie.join("|"),"i");function Re(e,t,n){var o,r,i,A,s=e.style;return(n=n||Pe(e))&&(""!==(A=n.getPropertyValue(t)||n[t])||se(e)||(A=I.style(e,t)),!h.pixelBoxStyles()&&Ue.test(A)&&We.test(t)&&(o=s.width,r=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=A,A=n.width,s.width=o,s.minWidth=r,s.maxWidth=i)),void 0!==A?A+"":A}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Ae.appendChild(a).appendChild(c);var e=n.getComputedStyle(c);o="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",s=36===t(e.right),r=36===t(e.width),c.style.position="absolute",i=12===t(c.offsetWidth/3),Ae.removeChild(a),c=null}}function t(e){return Math.round(parseFloat(e))}var o,r,i,s,l,a=A.createElement("div"),c=A.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===c.style.backgroundClip,I.extend(h,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),o},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),i}}))}();var ze=["Webkit","Moz","ms"],Ve=A.createElement("div").style,Xe={};function Je(e){var t=I.cssProps[e]||Xe[e];return t||(e in Ve?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=ze.length;n--;)if((e=ze[n]+t)in Ve)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,et=/^--/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function ot(e,t,n){var o=re.exec(t);return o?Math.max(0,o[2]-(n||0))+(o[3]||"px"):t}function rt(e,t,n,o,r,i){var A="width"===t?1:0,s=0,l=0;if(n===(o?"border":"content"))return 0;for(;A<4;A+=2)"margin"===n&&(l+=I.css(e,n+ie[A],!0,r)),o?("content"===n&&(l-=I.css(e,"padding"+ie[A],!0,r)),"margin"!==n&&(l-=I.css(e,"border"+ie[A]+"Width",!0,r))):(l+=I.css(e,"padding"+ie[A],!0,r),"padding"!==n?l+=I.css(e,"border"+ie[A]+"Width",!0,r):s+=I.css(e,"border"+ie[A]+"Width",!0,r));return!o&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))||0),l}function it(e,t,n){var o=Pe(e),r=(!h.boxSizingReliable()||n)&&"border-box"===I.css(e,"boxSizing",!1,o),i=r,A=Re(e,t,o),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(A)){if(!n)return A;A="auto"}return(!h.boxSizingReliable()&&r||"auto"===A||!parseFloat(A)&&"inline"===I.css(e,"display",!1,o))&&e.getClientRects().length&&(r="border-box"===I.css(e,"boxSizing",!1,o),(i=s in e)&&(A=e[s])),(A=parseFloat(A)||0)+rt(e,t,n||(r?"border":"content"),i,o,A)+"px"}function At(e,t,n,o,r){return new At.prototype.init(e,t,n,o,r)}I.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Re(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,o){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,i,A,s=z(t),l=et.test(t),a=e.style;if(l||(t=Je(s)),A=I.cssHooks[t]||I.cssHooks[s],void 0===n)return A&&"get"in A&&void 0!==(r=A.get(e,!1,o))?r:a[t];"string"===(i=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ue(e,t,r),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=r&&r[3]||(I.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(a[t]="inherit"),A&&"set"in A&&void 0===(n=A.set(e,n,o))||(l?a.setProperty(t,n):a[t]=n))}},css:function(e,t,n,o){var r,i,A,s=z(t);return et.test(t)||(t=Je(s)),(A=I.cssHooks[t]||I.cssHooks[s])&&"get"in A&&(r=A.get(e,!0,n)),void 0===r&&(r=Re(e,t,o)),"normal"===r&&t in nt&&(r=nt[t]),""===n||n?(i=parseFloat(r),!0===n||isFinite(i)?i||0:r):r}}),I.each(["height","width"],(function(e,t){I.cssHooks[t]={get:function(e,n,o){if(n)return!Ze.test(I.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,o):ce(e,tt,(function(){return it(e,t,o)}))},set:function(e,n,o){var r,i=Pe(e),A=!h.scrollboxSize()&&"absolute"===i.position,s=(A||o)&&"border-box"===I.css(e,"boxSizing",!1,i),l=o?rt(e,t,o,s,i):0;return s&&A&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-rt(e,t,"border",!1,i)-.5)),l&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=I.css(e,t)),ot(0,n,l)}}})),I.cssHooks.marginLeft=$e(h.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Re(e,"marginLeft"))||e.getBoundingClientRect().left-ce(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),I.each({margin:"",padding:"",border:"Width"},(function(e,t){I.cssHooks[e+t]={expand:function(n){for(var o=0,r={},i="string"==typeof n?n.split(" "):[n];o<4;o++)r[e+ie[o]+t]=i[o]||i[o-2]||i[0];return r}},"margin"!==e&&(I.cssHooks[e+t].set=ot)})),I.fn.extend({css:function(e,t){return P(this,(function(e,t,n){var o,r,i={},A=0;if(Array.isArray(t)){for(o=Pe(e),r=t.length;A<r;A++)i[t[A]]=I.css(e,t[A],!1,o);return i}return void 0!==n?I.style(e,t,n):I.css(e,t)}),e,t,arguments.length>1)}}),I.Tween=At,At.prototype={constructor:At,init:function(e,t,n,o,r,i){this.elem=e,this.prop=n,this.easing=r||I.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=o,this.unit=i||(I.cssNumber[n]?"":"px")},cur:function(){var e=At.propHooks[this.prop];return e&&e.get?e.get(this):At.propHooks._default.get(this)},run:function(e){var t,n=At.propHooks[this.prop];return this.options.duration?this.pos=t=I.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):At.propHooks._default.set(this),this}},At.prototype.init.prototype=At.prototype,At.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=I.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){I.fx.step[e.prop]?I.fx.step[e.prop](e):1!==e.elem.nodeType||!I.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:I.style(e.elem,e.prop,e.now+e.unit)}}},At.propHooks.scrollTop=At.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},I.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},I.fx=At.prototype.init,I.fx.step={};var st,lt,at=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function ut(){lt&&(!1===A.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ut):n.setTimeout(ut,I.fx.interval),I.fx.tick())}function dt(){return n.setTimeout((function(){st=void 0})),st=Date.now()}function Ct(e,t){var n,o=0,r={height:e};for(t=t?1:0;o<4;o+=2-t)r["margin"+(n=ie[o])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var o,r=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),i=0,A=r.length;i<A;i++)if(o=r[i].call(n,t,e))return o}function pt(e,t,n){var o,r,i=0,A=pt.prefilters.length,s=I.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=st||dt(),n=Math.max(0,a.startTime+a.duration-t),o=1-(n/a.duration||0),i=0,A=a.tweens.length;i<A;i++)a.tweens[i].run(o);return s.notifyWith(e,[a,o,n]),o<1&&A?n:(A||s.notifyWith(e,[a,1,0]),s.resolveWith(e,[a]),!1)},a=s.promise({elem:e,props:I.extend({},t),opts:I.extend(!0,{specialEasing:{},easing:I.easing._default},n),originalProperties:t,originalOptions:n,startTime:st||dt(),duration:n.duration,tweens:[],createTween:function(t,n){var o=I.Tween(e,a.opts,t,n,a.opts.specialEasing[t]||a.opts.easing);return a.tweens.push(o),o},stop:function(t){var n=0,o=t?a.tweens.length:0;if(r)return this;for(r=!0;n<o;n++)a.tweens[n].run(1);return t?(s.notifyWith(e,[a,1,0]),s.resolveWith(e,[a,t])):s.rejectWith(e,[a,t]),this}}),c=a.props;for(!function(e,t){var n,o,r,i,A;for(n in e)if(r=t[o=z(n)],i=e[n],Array.isArray(i)&&(r=i[1],i=e[n]=i[0]),n!==o&&(e[o]=i,delete e[n]),(A=I.cssHooks[o])&&"expand"in A)for(n in i=A.expand(i),delete e[o],i)n in e||(e[n]=i[n],t[n]=r);else t[o]=r}(c,a.opts.specialEasing);i<A;i++)if(o=pt.prefilters[i].call(a,e,c,a.opts))return g(o.stop)&&(I._queueHooks(a.elem,a.opts.queue).stop=o.stop.bind(o)),o;return I.map(c,ft,a),g(a.opts.start)&&a.opts.start.call(e,a),a.progress(a.opts.progress).done(a.opts.done,a.opts.complete).fail(a.opts.fail).always(a.opts.always),I.fx.timer(I.extend(l,{elem:e,anim:a,queue:a.opts.queue})),a}I.Animation=I.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(j);for(var n,o=0,r=e.length;o<r;o++)n=e[o],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var o,r,i,A,s,l,a,c,u="width"in t||"height"in t,d=this,C={},f=e.style,p=e.nodeType&&ae(e),m=J.get(e,"fxshow");for(o in n.queue||(null==(A=I._queueHooks(e,"fx")).unqueued&&(A.unqueued=0,s=A.empty.fire,A.empty.fire=function(){A.unqueued||s()}),A.unqueued++,d.always((function(){d.always((function(){A.unqueued--,I.queue(e,"fx").length||A.empty.fire()}))}))),t)if(r=t[o],at.test(r)){if(delete t[o],i=i||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!m||void 0===m[o])continue;p=!0}C[o]=m&&m[o]||I.style(e,o)}if((l=!I.isEmptyObject(t))||!I.isEmptyObject(C))for(o in u&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(a=m&&m.display)&&(a=J.get(e,"display")),"none"===(c=I.css(e,"display"))&&(a?c=a:(fe([e],!0),a=e.style.display||a,c=I.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=a)&&"none"===I.css(e,"float")&&(l||(d.done((function(){f.display=a})),null==a&&(c=f.display,a="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",d.always((function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}))),l=!1,C)l||(m?"hidden"in m&&(p=m.hidden):m=J.access(e,"fxshow",{display:a}),i&&(m.hidden=!p),p&&fe([e],!0),d.done((function(){for(o in p||fe([e]),J.remove(e,"fxshow"),C)I.style(e,o,C[o])}))),l=ft(p?m[o]:0,o,d),o in m||(m[o]=l.start,p&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),I.speed=function(e,t,n){var o=e&&"object"==typeof e?I.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return I.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in I.fx.speeds?o.duration=I.fx.speeds[o.duration]:o.duration=I.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){g(o.old)&&o.old.call(this),o.queue&&I.dequeue(this,o.queue)},o},I.fn.extend({fadeTo:function(e,t,n,o){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,o)},animate:function(e,t,n,o){var r=I.isEmptyObject(e),i=I.speed(t,n,o),A=function(){var t=pt(this,I.extend({},e),i);(r||J.get(this,"finish"))&&t.stop(!0)};return A.finish=A,r||!1===i.queue?this.each(A):this.queue(i.queue,A)},stop:function(e,t,n){var o=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",i=I.timers,A=J.get(this);if(r)A[r]&&A[r].stop&&o(A[r]);else for(r in A)A[r]&&A[r].stop&&ct.test(r)&&o(A[r]);for(r=i.length;r--;)i[r].elem!==this||null!=e&&i[r].queue!==e||(i[r].anim.stop(n),t=!1,i.splice(r,1));!t&&n||I.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),o=n[e+"queue"],r=n[e+"queueHooks"],i=I.timers,A=o?o.length:0;for(n.finish=!0,I.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<A;t++)o[t]&&o[t].finish&&o[t].finish.call(this);delete n.finish}))}}),I.each(["toggle","show","hide"],(function(e,t){var n=I.fn[t];I.fn[t]=function(e,o,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(Ct(t,!0),e,o,r)}})),I.each({slideDown:Ct("show"),slideUp:Ct("hide"),slideToggle:Ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){I.fn[e]=function(e,n,o){return this.animate(t,e,n,o)}})),I.timers=[],I.fx.tick=function(){var e,t=0,n=I.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||I.fx.stop(),st=void 0},I.fx.timer=function(e){I.timers.push(e),I.fx.start()},I.fx.interval=13,I.fx.start=function(){lt||(lt=!0,ut())},I.fx.stop=function(){lt=null},I.fx.speeds={slow:600,fast:200,_default:400},I.fn.delay=function(e,t){return e=I.fx&&I.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,o){var r=n.setTimeout(t,e);o.stop=function(){n.clearTimeout(r)}}))},function(){var e=A.createElement("input"),t=A.createElement("select").appendChild(A.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=A.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var mt,ht=I.expr.attrHandle;I.fn.extend({attr:function(e,t){return P(this,I.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){I.removeAttr(this,e)}))}}),I.extend({attr:function(e,t,n){var o,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?I.prop(e,t,n):(1===i&&I.isXMLDoc(e)||(r=I.attrHooks[t.toLowerCase()]||(I.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void I.removeAttr(e,t):r&&"set"in r&&void 0!==(o=r.set(e,n,t))?o:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(o=r.get(e,t))?o:null==(o=I.find.attr(e,t))?void 0:o)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&O(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,o=0,r=t&&t.match(j);if(r&&1===e.nodeType)for(;n=r[o++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?I.removeAttr(e,n):e.setAttribute(n,n),n}},I.each(I.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||I.find.attr;ht[t]=function(e,t,o){var r,i,A=t.toLowerCase();return o||(i=ht[A],ht[A]=r,r=null!=n(e,t,o)?A:null,ht[A]=i),r}}));var gt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function yt(e){return(e.match(j)||[]).join(" ")}function Et(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}I.fn.extend({prop:function(e,t){return P(this,I.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[I.propFix[e]||e]}))}}),I.extend({prop:function(e,t,n){var o,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&I.isXMLDoc(e)||(t=I.propFix[t]||t,r=I.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(o=r.set(e,n,t))?o:e[t]=n:r&&"get"in r&&null!==(o=r.get(e,t))?o:e[t]},propHooks:{tabIndex:{get:function(e){var t=I.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(I.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),I.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){I.propFix[this.toLowerCase()]=this})),I.fn.extend({addClass:function(e){var t,n,o,r,i,A,s,l=0;if(g(e))return this.each((function(t){I(this).addClass(e.call(this,t,Et(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(r=Et(n),o=1===n.nodeType&&" "+yt(r)+" "){for(A=0;i=t[A++];)o.indexOf(" "+i+" ")<0&&(o+=i+" ");r!==(s=yt(o))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,o,r,i,A,s,l=0;if(g(e))return this.each((function(t){I(this).removeClass(e.call(this,t,Et(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(r=Et(n),o=1===n.nodeType&&" "+yt(r)+" "){for(A=0;i=t[A++];)for(;o.indexOf(" "+i+" ")>-1;)o=o.replace(" "+i+" "," ");r!==(s=yt(o))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,o="string"===n||Array.isArray(e);return"boolean"==typeof t&&o?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){I(this).toggleClass(e.call(this,n,Et(this),t),t)})):this.each((function(){var t,r,i,A;if(o)for(r=0,i=I(this),A=bt(e);t=A[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=Et(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,o=0;for(t=" "+e+" ";n=this[o++];)if(1===n.nodeType&&(" "+yt(Et(n))+" ").indexOf(t)>-1)return!0;return!1}});var It=/\r/g;I.fn.extend({val:function(e){var t,n,o,r=this[0];return arguments.length?(o=g(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=o?e.call(this,n,I(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=I.map(r,(function(e){return null==e?"":e+""}))),(t=I.valHooks[this.type]||I.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=I.valHooks[r.type]||I.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(It,""):null==n?"":n:void 0}}),I.extend({valHooks:{option:{get:function(e){var t=I.find.attr(e,"value");return null!=t?t:yt(I.text(e))}},select:{get:function(e){var t,n,o,r=e.options,i=e.selectedIndex,A="select-one"===e.type,s=A?null:[],l=A?i+1:r.length;for(o=i<0?l:A?i:0;o<l;o++)if(((n=r[o]).selected||o===i)&&!n.disabled&&(!n.parentNode.disabled||!O(n.parentNode,"optgroup"))){if(t=I(n).val(),A)return t;s.push(t)}return s},set:function(e,t){for(var n,o,r=e.options,i=I.makeArray(t),A=r.length;A--;)((o=r[A]).selected=I.inArray(I.valHooks.option.get(o),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),I.each(["radio","checkbox"],(function(){I.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=I.inArray(I(e).val(),t)>-1}},h.checkOn||(I.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),h.focusin="onfocusin"in n;var xt=/^(?:focusinfocus|focusoutblur)$/,Gt=function(e){e.stopPropagation()};I.extend(I.event,{trigger:function(e,t,o,r){var i,s,l,a,c,u,d,C,p=[o||A],m=f.call(e,"type")?e.type:e,h=f.call(e,"namespace")?e.namespace.split("."):[];if(s=C=l=o=o||A,3!==o.nodeType&&8!==o.nodeType&&!xt.test(m+I.event.triggered)&&(m.indexOf(".")>-1&&(h=m.split("."),m=h.shift(),h.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[I.expando]?e:new I.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=o),t=null==t?[e]:I.makeArray(t,[e]),d=I.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(o,t))){if(!r&&!d.noBubble&&!v(o)){for(a=d.delegateType||m,xt.test(a+m)||(s=s.parentNode);s;s=s.parentNode)p.push(s),l=s;l===(o.ownerDocument||A)&&p.push(l.defaultView||l.parentWindow||n)}for(i=0;(s=p[i++])&&!e.isPropagationStopped();)C=s,e.type=i>1?a:d.bindType||m,(u=(J.get(s,"events")||{})[e.type]&&J.get(s,"handle"))&&u.apply(s,t),(u=c&&s[c])&&u.apply&&V(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),t)||!V(o)||c&&g(o[m])&&!v(o)&&((l=o[c])&&(o[c]=null),I.event.triggered=m,e.isPropagationStopped()&&C.addEventListener(m,Gt),o[m](),e.isPropagationStopped()&&C.removeEventListener(m,Gt),I.event.triggered=void 0,l&&(o[c]=l)),e.result}},simulate:function(e,t,n){var o=I.extend(new I.Event,n,{type:e,isSimulated:!0});I.event.trigger(o,null,t)}}),I.fn.extend({trigger:function(e,t){return this.each((function(){I.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return I.event.trigger(e,t,n,!0)}}),h.focusin||I.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){I.event.simulate(t,e.target,I.event.fix(e))};I.event.special[t]={setup:function(){var o=this.ownerDocument||this,r=J.access(o,t);r||o.addEventListener(e,n,!0),J.access(o,t,(r||0)+1)},teardown:function(){var o=this.ownerDocument||this,r=J.access(o,t)-1;r?J.access(o,t,r):(o.removeEventListener(e,n,!0),J.remove(o,t))}}}));var St=n.location,_t=Date.now(),wt=/\?/;I.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||I.error("Invalid XML: "+e),t};var Mt=/\[\]$/,Ot=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Qt=/^(?:input|select|textarea|keygen)/i;function Tt(e,t,n,o){var r;if(Array.isArray(t))I.each(t,(function(t,r){n||Mt.test(e)?o(e,r):Tt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,o)}));else if(n||"object"!==b(t))o(e,t);else for(r in t)Tt(e+"["+r+"]",t[r],n,o)}I.param=function(e,t){var n,o=[],r=function(e,t){var n=g(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!I.isPlainObject(e))I.each(e,(function(){r(this.name,this.value)}));else for(n in e)Tt(n,e[n],t,r);return o.join("&")},I.fn.extend({serialize:function(){return I.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=I.prop(this,"elements");return e?I.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!I(this).is(":disabled")&&Qt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!pe.test(e))})).map((function(e,t){var n=I(this).val();return null==n?null:Array.isArray(n)?I.map(n,(function(e){return{name:t.name,value:e.replace(Ot,"\r\n")}})):{name:t.name,value:n.replace(Ot,"\r\n")}})).get()}});var kt=/%20/g,Bt=/#.*$/,Lt=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,jt=/^(?:GET|HEAD)$/,Yt=/^\/\//,Kt={},Ft={},Ht="*/".concat("*"),qt=A.createElement("a");function Ut(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var o,r=0,i=t.toLowerCase().match(j)||[];if(g(n))for(;o=i[r++];)"+"===o[0]?(o=o.slice(1)||"*",(e[o]=e[o]||[]).unshift(n)):(e[o]=e[o]||[]).push(n)}}function Pt(e,t,n,o){var r={},i=e===Ft;function A(s){var l;return r[s]=!0,I.each(e[s]||[],(function(e,s){var a=s(t,n,o);return"string"!=typeof a||i||r[a]?i?!(l=a):void 0:(t.dataTypes.unshift(a),A(a),!1)})),l}return A(t.dataTypes[0])||!r["*"]&&A("*")}function Wt(e,t){var n,o,r=I.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:o||(o={}))[n]=t[n]);return o&&I.extend(!0,e,o),e}qt.href=St.href,I.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":I.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,I.ajaxSettings),t):Wt(I.ajaxSettings,e)},ajaxPrefilter:Ut(Kt),ajaxTransport:Ut(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var o,r,i,s,l,a,c,u,d,C,f=I.ajaxSetup({},t),p=f.context||f,m=f.context&&(p.nodeType||p.jquery)?I(p):I.event,h=I.Deferred(),g=I.Callbacks("once memory"),v=f.statusCode||{},y={},E={},b="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Nt.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=E[e.toLowerCase()]=E[e.toLowerCase()]||e,y[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)x.always(e[x.status]);else for(t in e)v[t]=[v[t],e[t]];return this},abort:function(e){var t=e||b;return o&&o.abort(t),G(0,t),this}};if(h.promise(x),f.url=((e||f.url||St.href)+"").replace(Yt,St.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(j)||[""],null==f.crossDomain){a=A.createElement("a");try{a.href=f.url,a.href=a.href,f.crossDomain=qt.protocol+"//"+qt.host!=a.protocol+"//"+a.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=I.param(f.data,f.traditional)),Pt(Kt,f,t,x),c)return x;for(d in(u=I.event&&f.global)&&0==I.active++&&I.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!jt.test(f.type),r=f.url.replace(Bt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(kt,"+")):(C=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(wt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Lt,"$1"),C=(wt.test(r)?"&":"?")+"_="+_t+++C),f.url=r+C),f.ifModified&&(I.lastModified[r]&&x.setRequestHeader("If-Modified-Since",I.lastModified[r]),I.etag[r]&&x.setRequestHeader("If-None-Match",I.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ht+"; q=0.01":""):f.accepts["*"]),f.headers)x.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(p,x,f)||c))return x.abort();if(b="abort",g.add(f.complete),x.done(f.success),x.fail(f.error),o=Pt(Ft,f,t,x)){if(x.readyState=1,u&&m.trigger("ajaxSend",[x,f]),c)return x;f.async&&f.timeout>0&&(l=n.setTimeout((function(){x.abort("timeout")}),f.timeout));try{c=!1,o.send(y,G)}catch(e){if(c)throw e;G(-1,e)}}else G(-1,"No Transport");function G(e,t,A,s){var a,d,C,y,E,b=t;c||(c=!0,l&&n.clearTimeout(l),o=void 0,i=s||"",x.readyState=e>0?4:0,a=e>=200&&e<300||304===e,A&&(y=function(e,t,n){for(var o,r,i,A,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(r in s)if(s[r]&&s[r].test(o)){l.unshift(r);break}if(l[0]in n)i=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){i=r;break}A||(A=r)}i=i||A}if(i)return i!==l[0]&&l.unshift(i),n[i]}(f,x,A)),y=function(e,t,n,o){var r,i,A,s,l,a={},c=e.dataTypes.slice();if(c[1])for(A in e.converters)a[A.toLowerCase()]=e.converters[A];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&o&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(A=a[l+" "+i]||a["* "+i]))for(r in a)if((s=r.split(" "))[1]===i&&(A=a[l+" "+s[0]]||a["* "+s[0]])){!0===A?A=a[r]:!0!==a[r]&&(i=s[0],c.unshift(s[1]));break}if(!0!==A)if(A&&e.throws)t=A(t);else try{t=A(t)}catch(e){return{state:"parsererror",error:A?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(f,y,x,a),a?(f.ifModified&&((E=x.getResponseHeader("Last-Modified"))&&(I.lastModified[r]=E),(E=x.getResponseHeader("etag"))&&(I.etag[r]=E)),204===e||"HEAD"===f.type?b="nocontent":304===e?b="notmodified":(b=y.state,d=y.data,a=!(C=y.error))):(C=b,!e&&b||(b="error",e<0&&(e=0))),x.status=e,x.statusText=(t||b)+"",a?h.resolveWith(p,[d,b,x]):h.rejectWith(p,[x,b,C]),x.statusCode(v),v=void 0,u&&m.trigger(a?"ajaxSuccess":"ajaxError",[x,f,a?d:C]),g.fireWith(p,[x,b]),u&&(m.trigger("ajaxComplete",[x,f]),--I.active||I.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return I.get(e,t,n,"json")},getScript:function(e,t){return I.get(e,void 0,t,"script")}}),I.each(["get","post"],(function(e,t){I[t]=function(e,n,o,r){return g(n)&&(r=r||o,o=n,n=void 0),I.ajax(I.extend({url:e,type:t,dataType:r,data:n,success:o},I.isPlainObject(e)&&e))}})),I._evalUrl=function(e,t){return I.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){I.globalEval(e,t)}})},I.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=I(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){I(this).wrapInner(e.call(this,t))})):this.each((function(){var t=I(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){I(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){I(this).replaceWith(this.childNodes)})),this}}),I.expr.pseudos.hidden=function(e){return!I.expr.pseudos.visible(e)},I.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},I.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Rt={0:200,1223:204},$t=I.ajaxSettings.xhr();h.cors=!!$t&&"withCredentials"in $t,h.ajax=$t=!!$t,I.ajaxTransport((function(e){var t,o;if(h.cors||$t&&!e.crossDomain)return{send:function(r,i){var A,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(A in e.xhrFields)s[A]=e.xhrFields[A];for(A in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(A,r[A]);t=function(e){return function(){t&&(t=o=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Rt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),o=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=o:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&o()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),I.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),I.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return I.globalEval(e),e}}}),I.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),I.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(o,r){t=I("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),A.head.appendChild(t[0])},abort:function(){n&&n()}}}));var zt,Vt=[],Xt=/(=)\?(?=&|$)|\?\?/;I.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||I.expando+"_"+_t++;return this[e]=!0,e}}),I.ajaxPrefilter("json jsonp",(function(e,t,o){var r,i,A,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+r):!1!==e.jsonp&&(e.url+=(wt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return A||I.error(r+" was not called"),A[0]},e.dataTypes[0]="json",i=n[r],n[r]=function(){A=arguments},o.always((function(){void 0===i?I(n).removeProp(r):n[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Vt.push(r)),A&&g(i)&&i(A[0]),A=i=void 0})),"script"})),h.createHTMLDocument=((zt=A.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===zt.childNodes.length),I.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(h.createHTMLDocument?((o=(t=A.implementation.createHTMLDocument("")).createElement("base")).href=A.location.href,t.head.appendChild(o)):t=A),i=!n&&[],(r=D.exec(e))?[t.createElement(r[1])]:(r=xe([e],t,i),i&&i.length&&I(i).remove(),I.merge([],r.childNodes)));var o,r,i},I.fn.load=function(e,t,n){var o,r,i,A=this,s=e.indexOf(" ");return s>-1&&(o=yt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),A.length>0&&I.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){i=arguments,A.html(o?I("<div>").append(I.parseHTML(e)).find(o):e)})).always(n&&function(e,t){A.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},I.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){I.fn[t]=function(e){return this.on(t,e)}})),I.expr.pseudos.animated=function(e){return I.grep(I.timers,(function(t){return e===t.elem})).length},I.offset={setOffset:function(e,t,n){var o,r,i,A,s,l,a=I.css(e,"position"),c=I(e),u={};"static"===a&&(e.style.position="relative"),s=c.offset(),i=I.css(e,"top"),l=I.css(e,"left"),("absolute"===a||"fixed"===a)&&(i+l).indexOf("auto")>-1?(A=(o=c.position()).top,r=o.left):(A=parseFloat(i)||0,r=parseFloat(l)||0),g(t)&&(t=t.call(e,n,I.extend({},s))),null!=t.top&&(u.top=t.top-s.top+A),null!=t.left&&(u.left=t.left-s.left+r),"using"in t?t.using.call(e,u):c.css(u)}},I.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){I.offset.setOffset(this,e,t)}));var t,n,o=this[0];return o?o.getClientRects().length?(t=o.getBoundingClientRect(),n=o.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,o=this[0],r={top:0,left:0};if("fixed"===I.css(o,"position"))t=o.getBoundingClientRect();else{for(t=this.offset(),n=o.ownerDocument,e=o.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===I.css(e,"position");)e=e.parentNode;e&&e!==o&&1===e.nodeType&&((r=I(e).offset()).top+=I.css(e,"borderTopWidth",!0),r.left+=I.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-I.css(o,"marginTop",!0),left:t.left-r.left-I.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===I.css(e,"position");)e=e.offsetParent;return e||Ae}))}}),I.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;I.fn[e]=function(o){return P(this,(function(e,o,r){var i;if(v(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===r)return i?i[t]:e[o];i?i.scrollTo(n?i.pageXOffset:r,n?r:i.pageYOffset):e[o]=r}),e,o,arguments.length)}})),I.each(["top","left"],(function(e,t){I.cssHooks[t]=$e(h.pixelPosition,(function(e,n){if(n)return n=Re(e,t),Ue.test(n)?I(e).position()[t]+"px":n}))})),I.each({Height:"height",Width:"width"},(function(e,t){I.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,o){I.fn[o]=function(r,i){var A=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===i?"margin":"border");return P(this,(function(t,n,r){var i;return v(t)?0===o.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?I.css(t,n,s):I.style(t,n,r,s)}),t,A?r:void 0,A)}}))})),I.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){I.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}})),I.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),I.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,o){return this.on(t,e,n,o)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),I.proxy=function(e,t){var n,o,r;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return o=l.call(arguments,2),(r=function(){return e.apply(t||this,o.concat(l.call(arguments)))}).guid=e.guid=e.guid||I.guid++,r},I.holdReady=function(e){e?I.readyWait++:I.ready(!0)},I.isArray=Array.isArray,I.parseJSON=JSON.parse,I.nodeName=O,I.isFunction=g,I.isWindow=v,I.camelCase=z,I.type=b,I.now=Date.now,I.isNumeric=function(e){var t=I.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(o=function(){return I}.apply(t,[]))||(e.exports=o);var Jt=n.jQuery,Zt=n.$;return I.noConflict=function(e){return n.$===I&&(n.$=Zt),e&&n.jQuery===I&&(n.jQuery=Jt),I},r||(n.jQuery=n.$=I),I}))},function(e,t,n){var o=n(1),r=n(6);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1},A=(o(r,i),r.locals?r.locals:{});e.exports=A},function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(8);var o,r,i,A,s,l,a=n(0),c=(o="/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/demo/demo.ts",r="4886f2e933784b530cfdb99066c8a795a4d28a1d",i=new(0,function(){}.constructor)("return this")(),s={path:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/demo/demo.ts",statementMap:{0:{start:{line:3,column:17},end:{line:3,column:46}},1:{start:{line:4,column:0},end:{line:4,column:32}},2:{start:{line:5,column:0},end:{line:5,column:31}},3:{start:{line:6,column:16},end:{line:16,column:1}},4:{start:{line:17,column:0},end:{line:17,column:30}}},fnMap:{},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/demo/demo.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/donut_chart/src/demo/demo.ts"],names:[],mappings:"AAAA,OAAO,aAAa,CAAC;AACrB,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAGnC,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC/C,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAChC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAE/B,MAAM,OAAO,GAAG;IACd,YAAY,EAAE,CAAC,aAAa,EAAE,QAAQ,EAAE,mBAAmB,EAAE,aAAa,CAAC;IAC3E,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC1B,SAAS,EAAE;QACT,CAAC,SAAS,EAAE,SAAS,CAAC;QACtB,CAAC,SAAS,EAAE,SAAS,CAAC;QACtB,CAAC,SAAS,EAAE,SAAS,CAAC;QACtB,CAAC,SAAS,EAAE,SAAS,CAAC;QACtB,CAAC,SAAS,EAAE,SAAS,CAAC;KACvB;CACS,CAAC;AAEb,IAAI,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC",sourcesContent:["import './demo.scss';\nimport { Facade } from '../Facade';\nimport { Options } from '../model/Options';\n\nconst chartDiv = document.createElement('div');\nchartDiv.classList.add('chart');\ndocument.body.append(chartDiv);\n\nconst options = {\n  chartOptions: ['Великолепно', 'Хорошо', 'Удовлетворительно', 'Разочарован'],\n  amountAbs: [520, 260, 260],\n  gradients: [\n    ['#FFE39C', '#FFBA9C'],\n    ['#6FCF97', '#66D2EA'],\n    ['#BC9CFF', '#8BA4F9'],\n    ['#919191', '#3D4975'],\n    ['#BC9CFF', '#8BA4F9'],\n  ],\n} as Options;\n\nnew Facade(chartDiv, options);\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(l=i[A="__coverage__"]||(i[A]={}))[o]&&l[o].hash===r?l[o]:(s.hash=r,l[o]=s));const u=(c.s[0]++,document.createElement("div"));c.s[1]++,u.classList.add("chart"),c.s[2]++,document.body.append(u);const d=(c.s[3]++,{chartOptions:["Великолепно","Хорошо","Удовлетворительно","Разочарован"],amountAbs:[520,260,260],gradients:[["#FFE39C","#FFBA9C"],["#6FCF97","#66D2EA"],["#BC9CFF","#8BA4F9"],["#919191","#3D4975"],["#BC9CFF","#8BA4F9"]]});c.s[4]++,new a.a(u,d)},function(e,t,n){var o=n(1),r=n(9);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1},A=(o(r,i),r.locals?r.locals:{});e.exports=A},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,